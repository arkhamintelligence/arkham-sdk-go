// Package arkham provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package arkham

import (
	"time"

	uuid "github.com/google/uuid"
)

const (
	Api_keyScopes   = "api_key.Scopes"
	SignatureScopes = "signature.Scopes"
)

// Defines values for AlertPriceType.
const (
	AlertPriceTypeIndex AlertPriceType = "index"
	AlertPriceTypeLast  AlertPriceType = "last"
	AlertPriceTypeMark  AlertPriceType = "mark"
)

// Defines values for AlertType.
const (
	AlertTypeAbove AlertType = "above"
	AlertTypeBelow AlertType = "below"
)

// Defines values for CandleDuration.
const (
	CandleDurationD15m CandleDuration = "15m"
	CandleDurationD1h  CandleDuration = "1h"
	CandleDurationD1m  CandleDuration = "1m"
	CandleDurationD24h CandleDuration = "24h"
	CandleDurationD30m CandleDuration = "30m"
	CandleDurationD5m  CandleDuration = "5m"
	CandleDurationD6h  CandleDuration = "6h"
)

// Defines values for ErrorCode.
const (
	ErrorCodeBadRequest        ErrorCode = 1
	ErrorCodeChannelRequired   ErrorCode = 8
	ErrorCodeForbidden         ErrorCode = 13
	ErrorCodeInternalError     ErrorCode = 0
	ErrorCodeInvalidChannel    ErrorCode = 7
	ErrorCodeInvalidGroup      ErrorCode = 10
	ErrorCodeInvalidMethod     ErrorCode = 5
	ErrorCodeInvalidSymbol     ErrorCode = 3
	ErrorCodeMethodRequired    ErrorCode = 6
	ErrorCodeRateLimitExceeded ErrorCode = 11
	ErrorCodeSymbolRequired    ErrorCode = 4
	ErrorCodeUnauthorized      ErrorCode = 2
)

// Defines values for ErrorId.
const (
	ErrorIdBadRequest                           ErrorId = 10001
	ErrorIdChangeEmailRequestRateLimited        ErrorId = 90011
	ErrorIdChannelRequired                      ErrorId = 20004
	ErrorIdClientOrderIdAlreadyExists           ErrorId = 30014
	ErrorIdClientOrderIdNotFound                ErrorId = 30015
	ErrorIdConflict                             ErrorId = 10024
	ErrorIdExpiredSignature                     ErrorId = 10018
	ErrorIdExpiresMissing                       ErrorId = 10015
	ErrorIdExpiresTooFar                        ErrorId = 10017
	ErrorIdFailedRiskCheck                      ErrorId = 40001
	ErrorIdForbidden                            ErrorId = 10006
	ErrorIdFuturesNotEnabled                    ErrorId = 40006
	ErrorIdIPNotAllowed                         ErrorId = 10020
	ErrorIdInsufficientBalance                  ErrorId = 30010
	ErrorIdInsufficientLiquidity                ErrorId = 30013
	ErrorIdInternalError                        ErrorId = 10000
	ErrorIdInvalidAlertPriceType                ErrorId = 90002
	ErrorIdInvalidAlertType                     ErrorId = 90001
	ErrorIdInvalidBrokerId                      ErrorId = 30025
	ErrorIdInvalidCandleDuration                ErrorId = 90004
	ErrorIdInvalidChain                         ErrorId = 40005
	ErrorIdInvalidChannel                       ErrorId = 20003
	ErrorIdInvalidClientOrderID                 ErrorId = 30020
	ErrorIdInvalidEmail                         ErrorId = 90010
	ErrorIdInvalidGroup                         ErrorId = 20005
	ErrorIdInvalidIP                            ErrorId = 10007
	ErrorIdInvalidMFA                           ErrorId = 90007
	ErrorIdInvalidMethod                        ErrorId = 20001
	ErrorIdInvalidNotificationType              ErrorId = 90005
	ErrorIdInvalidNotional                      ErrorId = 30005
	ErrorIdInvalidOrderSide                     ErrorId = 30023
	ErrorIdInvalidOrderType                     ErrorId = 30024
	ErrorIdInvalidPair                          ErrorId = 30011
	ErrorIdInvalidPostOnly                      ErrorId = 30003
	ErrorIdInvalidPrice                         ErrorId = 30002
	ErrorIdInvalidReduceOnly                    ErrorId = 30004
	ErrorIdInvalidRole                          ErrorId = 90009
	ErrorIdInvalidSize                          ErrorId = 30001
	ErrorIdInvalidSymbol                        ErrorId = 10003
	ErrorIdInvalidTriggerPriceType              ErrorId = 30022
	ErrorIdInvalidTriggerType                   ErrorId = 30021
	ErrorIdInvalidVoucherStatus                 ErrorId = 90003
	ErrorIdInvalidWithdrawalAddress             ErrorId = 40003
	ErrorIdKeyNotPermitted                      ErrorId = 10009
	ErrorIdLspAssignmentGreaterThanMaxNotional  ErrorId = 40008
	ErrorIdLspMaxNotionalGreaterThanMarginLimit ErrorId = 40009
	ErrorIdLspMaxNotionalMustNotBeNegative      ErrorId = 40010
	ErrorIdMFA                                  ErrorId = 10021
	ErrorIdMemoNotSupported                     ErrorId = 40002
	ErrorIdMethodRequired                       ErrorId = 20002
	ErrorIdNegativeAmount                       ErrorId = 40012
	ErrorIdNoMarkPrice                          ErrorId = 30012
	ErrorIdNotFound                             ErrorId = 10025
	ErrorIdOrderIdNotFound                      ErrorId = 30028
	ErrorIdPairNotEnabled                       ErrorId = 30007
	ErrorIdParsingExpires                       ErrorId = 10016
	ErrorIdParsingKey                           ErrorId = 10010
	ErrorIdParsingRequest                       ErrorId = 10022
	ErrorIdPortfolioLiquidation                 ErrorId = 40011
	ErrorIdPositionLimit                        ErrorId = 30019
	ErrorIdPositionNotFound                     ErrorId = 40004
	ErrorIdPostOnly                             ErrorId = 30009
	ErrorIdRateLimitExceeded                    ErrorId = 10005
	ErrorIdReduceOnlyInvalid                    ErrorId = 30016
	ErrorIdRequiresRead                         ErrorId = 10012
	ErrorIdRequiresWrite                        ErrorId = 10013
	ErrorIdSignatureMismatch                    ErrorId = 10019
	ErrorIdSignatureMissing                     ErrorId = 10014
	ErrorIdSubaccountHasOpenFuturePositions     ErrorId = 40007
	ErrorIdSubaccountNotFound                   ErrorId = 10023
	ErrorIdSymbolRequired                       ErrorId = 10004
	ErrorIdThrottled                            ErrorId = 10008
	ErrorIdTooManyAttempts                      ErrorId = 90008
	ErrorIdTooManyMFAAttempts                   ErrorId = 90006
	ErrorIdTradingFreeze                        ErrorId = 30008
	ErrorIdUnauthorized                         ErrorId = 10002
	ErrorIdUnknownOrderType                     ErrorId = 30006
	ErrorIdUnsupportedAssetType                 ErrorId = 30018
	ErrorIdUnsupportedOrderSide                 ErrorId = 30017
	ErrorIdUserDeleted                          ErrorId = 30027
	ErrorIdUserFrozen                           ErrorId = 30026
	ErrorIdVerifyingKey                         ErrorId = 10011
	ErrorIdZeroAmount                           ErrorId = 40013
)

// Defines values for ErrorName.
const (
	ErrorNameBadRequest                           ErrorName = "BadRequest"
	ErrorNameChangeEmailRequestRateLimited        ErrorName = "ChangeEmailRequestRateLimited"
	ErrorNameChannelRequired                      ErrorName = "ChannelRequired"
	ErrorNameClientOrderIdAlreadyExists           ErrorName = "ClientOrderIdAlreadyExists"
	ErrorNameClientOrderIdNotFound                ErrorName = "ClientOrderIdNotFound"
	ErrorNameConflict                             ErrorName = "Conflict"
	ErrorNameExpiredSignature                     ErrorName = "ExpiredSignature"
	ErrorNameExpiresMissing                       ErrorName = "ExpiresMissing"
	ErrorNameExpiresTooFar                        ErrorName = "ExpiresTooFar"
	ErrorNameFailedRiskCheck                      ErrorName = "FailedRiskCheck"
	ErrorNameForbidden                            ErrorName = "Forbidden"
	ErrorNameFuturesNotEnabled                    ErrorName = "FuturesNotEnabled"
	ErrorNameIPNotAllowed                         ErrorName = "IPNotAllowed"
	ErrorNameInsufficientBalance                  ErrorName = "InsufficientBalance"
	ErrorNameInsufficientLiquidity                ErrorName = "InsufficientLiquidity"
	ErrorNameInternalError                        ErrorName = "InternalError"
	ErrorNameInvalidAlertPriceType                ErrorName = "InvalidAlertPriceType"
	ErrorNameInvalidAlertType                     ErrorName = "InvalidAlertType"
	ErrorNameInvalidBrokerId                      ErrorName = "InvalidBrokerId"
	ErrorNameInvalidCandleDuration                ErrorName = "InvalidCandleDuration"
	ErrorNameInvalidChain                         ErrorName = "InvalidChain"
	ErrorNameInvalidChannel                       ErrorName = "InvalidChannel"
	ErrorNameInvalidClientOrderID                 ErrorName = "InvalidClientOrderID"
	ErrorNameInvalidEmail                         ErrorName = "InvalidEmail"
	ErrorNameInvalidGroup                         ErrorName = "InvalidGroup"
	ErrorNameInvalidIP                            ErrorName = "InvalidIP"
	ErrorNameInvalidMFA                           ErrorName = "InvalidMFA"
	ErrorNameInvalidMethod                        ErrorName = "InvalidMethod"
	ErrorNameInvalidNotificationType              ErrorName = "InvalidNotificationType"
	ErrorNameInvalidNotional                      ErrorName = "InvalidNotional"
	ErrorNameInvalidOrderSide                     ErrorName = "InvalidOrderSide"
	ErrorNameInvalidOrderType                     ErrorName = "InvalidOrderType"
	ErrorNameInvalidPair                          ErrorName = "InvalidPair"
	ErrorNameInvalidPostOnly                      ErrorName = "InvalidPostOnly"
	ErrorNameInvalidPrice                         ErrorName = "InvalidPrice"
	ErrorNameInvalidReduceOnly                    ErrorName = "InvalidReduceOnly"
	ErrorNameInvalidRole                          ErrorName = "InvalidRole"
	ErrorNameInvalidSize                          ErrorName = "InvalidSize"
	ErrorNameInvalidSymbol                        ErrorName = "InvalidSymbol"
	ErrorNameInvalidTriggerPriceType              ErrorName = "InvalidTriggerPriceType"
	ErrorNameInvalidTriggerType                   ErrorName = "InvalidTriggerType"
	ErrorNameInvalidVoucherStatus                 ErrorName = "InvalidVoucherStatus"
	ErrorNameInvalidWithdrawalAddress             ErrorName = "InvalidWithdrawalAddress"
	ErrorNameKeyNotPermitted                      ErrorName = "KeyNotPermitted"
	ErrorNameLspAssignmentGreaterThanMaxNotional  ErrorName = "LspAssignmentGreaterThanMaxNotional"
	ErrorNameLspMaxNotionalGreaterThanMarginLimit ErrorName = "LspMaxNotionalGreaterThanMarginLimit"
	ErrorNameLspMaxNotionalMustNotBeNegative      ErrorName = "LspMaxNotionalMustNotBeNegative"
	ErrorNameMFA                                  ErrorName = "MFA"
	ErrorNameMemoNotSupported                     ErrorName = "MemoNotSupported"
	ErrorNameMethodRequired                       ErrorName = "MethodRequired"
	ErrorNameNegativeAmount                       ErrorName = "NegativeAmount"
	ErrorNameNoMarkPrice                          ErrorName = "NoMarkPrice"
	ErrorNameNotFound                             ErrorName = "NotFound"
	ErrorNameOrderIdNotFound                      ErrorName = "OrderIdNotFound"
	ErrorNamePairNotEnabled                       ErrorName = "PairNotEnabled"
	ErrorNameParsingExpires                       ErrorName = "ParsingExpires"
	ErrorNameParsingKey                           ErrorName = "ParsingKey"
	ErrorNameParsingRequest                       ErrorName = "ParsingRequest"
	ErrorNamePortfolioLiquidation                 ErrorName = "PortfolioLiquidation"
	ErrorNamePositionLimit                        ErrorName = "PositionLimit"
	ErrorNamePositionNotFound                     ErrorName = "PositionNotFound"
	ErrorNamePostOnly                             ErrorName = "PostOnly"
	ErrorNameRateLimitExceeded                    ErrorName = "RateLimitExceeded"
	ErrorNameReduceOnlyInvalid                    ErrorName = "ReduceOnlyInvalid"
	ErrorNameRequiresRead                         ErrorName = "RequiresRead"
	ErrorNameRequiresWrite                        ErrorName = "RequiresWrite"
	ErrorNameSignatureMismatch                    ErrorName = "SignatureMismatch"
	ErrorNameSignatureMissing                     ErrorName = "SignatureMissing"
	ErrorNameSubaccountHasOpenFuturePositions     ErrorName = "SubaccountHasOpenFuturePositions"
	ErrorNameSubaccountNotFound                   ErrorName = "SubaccountNotFound"
	ErrorNameSymbolRequired                       ErrorName = "SymbolRequired"
	ErrorNameThrottled                            ErrorName = "Throttled"
	ErrorNameTooManyAttempts                      ErrorName = "TooManyAttempts"
	ErrorNameTooManyMFAAttempts                   ErrorName = "TooManyMFAAttempts"
	ErrorNameTradingFreeze                        ErrorName = "TradingFreeze"
	ErrorNameUnauthorized                         ErrorName = "Unauthorized"
	ErrorNameUnknownOrderType                     ErrorName = "UnknownOrderType"
	ErrorNameUnsupportedAssetType                 ErrorName = "UnsupportedAssetType"
	ErrorNameUnsupportedOrderSide                 ErrorName = "UnsupportedOrderSide"
	ErrorNameUserDeleted                          ErrorName = "UserDeleted"
	ErrorNameUserFrozen                           ErrorName = "UserFrozen"
	ErrorNameVerifyingKey                         ErrorName = "VerifyingKey"
	ErrorNameZeroAmount                           ErrorName = "ZeroAmount"
)

// Defines values for Exchange.
const (
	ExchangeArkham       Exchange = "arkham"
	ExchangeBinance      Exchange = "binance"
	ExchangeBinanceUS    Exchange = "binance_us"
	ExchangeBitMart      Exchange = "bitmart"
	ExchangeBitget       Exchange = "bitget"
	ExchangeBybit        Exchange = "bybit"
	ExchangeCoinbase     Exchange = "coinbase"
	ExchangeCryptoDotCom Exchange = "crypto.com"
	ExchangeGateio       Exchange = "gateio"
	ExchangeGemini       Exchange = "gemini"
	ExchangeHtx          Exchange = "htx"
	ExchangeKraken       Exchange = "kraken"
	ExchangeKucoin       Exchange = "kucoin"
	ExchangeMexc         Exchange = "mexc"
	ExchangeOkx          Exchange = "okx"
)

// Defines values for ListingStatus.
const (
	ListingStatusDelisted ListingStatus = "delisted"
	ListingStatusListed   ListingStatus = "listed"
	ListingStatusStaged   ListingStatus = "staged"
)

// Defines values for Locale.
const (
	LocaleEn Locale = "en"
	LocaleEs Locale = "es"
	LocaleUk Locale = "uk"
	LocaleVi Locale = "vi"
	LocaleZh Locale = "zh"
)

// Defines values for MarginScheduleName.
const (
	MarginScheduleNameA MarginScheduleName = "A"
	MarginScheduleNameB MarginScheduleName = "B"
	MarginScheduleNameC MarginScheduleName = "C"
	MarginScheduleNameD MarginScheduleName = "D"
	MarginScheduleNameE MarginScheduleName = "E"
	MarginScheduleNameF MarginScheduleName = "F"
	MarginScheduleNameG MarginScheduleName = "G"
)

// Defines values for NotificationType.
const (
	NotificationTypeAdjustment   NotificationType = "adjustment"
	NotificationTypeAirdrop      NotificationType = "airdrop"
	NotificationTypeAnnouncement NotificationType = "announcement"
	NotificationTypeCommission   NotificationType = "commission"
	NotificationTypeDeleverage   NotificationType = "deleverage"
	NotificationTypeDeposit      NotificationType = "deposit"
	NotificationTypeExpiration   NotificationType = "expiration"
	NotificationTypeMargin       NotificationType = "margin"
	NotificationTypeOrder        NotificationType = "order"
	NotificationTypePrice        NotificationType = "price"
	NotificationTypeRebate       NotificationType = "rebate"
	NotificationTypeReward       NotificationType = "reward"
	NotificationTypeWithdrawal   NotificationType = "withdrawal"
)

// Defines values for OrderSide.
const (
	OrderSideBuy  OrderSide = "buy"
	OrderSideSell OrderSide = "sell"
)

// Defines values for OrderStatus.
const (
	OrderStatusBooked    OrderStatus = "booked"
	OrderStatusCancelled OrderStatus = "cancelled"
	OrderStatusClosed    OrderStatus = "closed"
	OrderStatusMaker     OrderStatus = "maker"
	OrderStatusNew       OrderStatus = "new"
	OrderStatusTaker     OrderStatus = "taker"
)

// Defines values for OrderType.
const (
	OrderTypeLimitFok OrderType = "limitFok"
	OrderTypeLimitGtc OrderType = "limitGtc"
	OrderTypeLimitIoc OrderType = "limitIoc"
	OrderTypeMarket   OrderType = "market"
)

// Defines values for PairMarginSchedule.
const (
	PairMarginScheduleA PairMarginSchedule = "A"
	PairMarginScheduleB PairMarginSchedule = "B"
	PairMarginScheduleC PairMarginSchedule = "C"
	PairMarginScheduleD PairMarginSchedule = "D"
	PairMarginScheduleE PairMarginSchedule = "E"
	PairMarginScheduleF PairMarginSchedule = "F"
	PairMarginScheduleG PairMarginSchedule = "G"
)

// Defines values for PairType.
const (
	PairTypePerpetual PairType = "perpetual"
	PairTypeSpot      PairType = "spot"
)

// Defines values for PositionUpdateReason.
const (
	PositionUpdateReasonAdjustment    PositionUpdateReason = "adjustment"
	PositionUpdateReasonAirdrop       PositionUpdateReason = "airdrop"
	PositionUpdateReasonAssetTransfer PositionUpdateReason = "assetTransfer"
	PositionUpdateReasonCommission    PositionUpdateReason = "commission"
	PositionUpdateReasonDeleverage    PositionUpdateReason = "deleverage"
	PositionUpdateReasonDeposit       PositionUpdateReason = "deposit"
	PositionUpdateReasonExpiration    PositionUpdateReason = "expiration"
	PositionUpdateReasonFundingFee    PositionUpdateReason = "fundingFee"
	PositionUpdateReasonLiquidation   PositionUpdateReason = "liquidation"
	PositionUpdateReasonLspAssignment PositionUpdateReason = "lspAssignment"
	PositionUpdateReasonOrderFill     PositionUpdateReason = "orderFill"
	PositionUpdateReasonPerpTransfer  PositionUpdateReason = "perpTransfer"
	PositionUpdateReasonRealizePNL    PositionUpdateReason = "realizePNL"
	PositionUpdateReasonRebate        PositionUpdateReason = "rebate"
	PositionUpdateReasonReward        PositionUpdateReason = "reward"
	PositionUpdateReasonTradingFee    PositionUpdateReason = "tradingFee"
	PositionUpdateReasonWithdraw      PositionUpdateReason = "withdraw"
	PositionUpdateReasonWithdrawalFee PositionUpdateReason = "withdrawalFee"
)

// Defines values for RewardType.
const (
	RewardTypeFeeCredit          RewardType = "fee_credit"
	RewardTypeMarginBonus        RewardType = "margin_bonus"
	RewardTypePoints             RewardType = "points"
	RewardTypeTokens             RewardType = "tokens"
	RewardTypeTradingFeeDiscount RewardType = "trading_fee_discount"
)

// Defines values for TriggerPriceType.
const (
	TriggerPriceTypeIndex TriggerPriceType = "index"
	TriggerPriceTypeLast  TriggerPriceType = "last"
	TriggerPriceTypeMark  TriggerPriceType = "mark"
)

// Defines values for TriggerStatus.
const (
	TriggerStatusCancelled TriggerStatus = "cancelled"
	TriggerStatusStaged    TriggerStatus = "staged"
	TriggerStatusTriggered TriggerStatus = "triggered"
)

// Defines values for TriggerType.
const (
	TriggerTypeStopLoss   TriggerType = "stopLoss"
	TriggerTypeTakeProfit TriggerType = "takeProfit"
)

// Defines values for VoucherConditionType.
const (
	VoucherConditionTypeBasicKyc       VoucherConditionType = "basic_kyc"
	VoucherConditionTypeDepositedToken VoucherConditionType = "deposited_token"
	VoucherConditionTypeDepositedUsd   VoucherConditionType = "deposited_usd"
	VoucherConditionTypeTradedToken    VoucherConditionType = "traded_token"
	VoucherConditionTypeTradedUsd      VoucherConditionType = "traded_usd"
)

// Defines values for VoucherStatus.
const (
	VoucherStatusClaimable   VoucherStatus = "claimable"
	VoucherStatusClaimed     VoucherStatus = "claimed"
	VoucherStatusInProgress  VoucherStatus = "in_progress"
	VoucherStatusNotStarted  VoucherStatus = "not_started"
	VoucherStatusUnavailable VoucherStatus = "unavailable"
)

// Defines values for WebsocketChannel.
const (
	WebsocketChannelBalances               WebsocketChannel = "balances"
	WebsocketChannelCandles                WebsocketChannel = "candles"
	WebsocketChannelConfirmations          WebsocketChannel = "confirmations"
	WebsocketChannelErrors                 WebsocketChannel = "errors"
	WebsocketChannelL1Updates              WebsocketChannel = "l1_updates"
	WebsocketChannelL2Updates              WebsocketChannel = "l2_updates"
	WebsocketChannelLspAssignments         WebsocketChannel = "lsp_assignments"
	WebsocketChannelMargin                 WebsocketChannel = "margin"
	WebsocketChannelOrderStatuses          WebsocketChannel = "order_statuses"
	WebsocketChannelOrdersCancel           WebsocketChannel = "orders/cancel"
	WebsocketChannelOrdersCancelAll        WebsocketChannel = "orders/cancel/all"
	WebsocketChannelOrdersNew              WebsocketChannel = "orders/new"
	WebsocketChannelPong                   WebsocketChannel = "pong"
	WebsocketChannelPositions              WebsocketChannel = "positions"
	WebsocketChannelTicker                 WebsocketChannel = "ticker"
	WebsocketChannelTrades                 WebsocketChannel = "trades"
	WebsocketChannelTriggerOrders          WebsocketChannel = "trigger_orders"
	WebsocketChannelTriggerOrdersCancel    WebsocketChannel = "trigger_orders/cancel"
	WebsocketChannelTriggerOrdersCancelAll WebsocketChannel = "trigger_orders/cancel/all"
	WebsocketChannelTriggerOrdersNew       WebsocketChannel = "trigger_orders/new"
)

// Defines values for WebsocketDataType.
const (
	WebsocketDataTypeSnapshot WebsocketDataType = "snapshot"
	WebsocketDataTypeUpdate   WebsocketDataType = "update"
)

// Defines values for WebsocketErrorResponseChannel.
const (
	WebsocketErrorResponseChannelErrors WebsocketErrorResponseChannel = "errors"
)

// Defines values for WebsocketMethod.
const (
	WebsocketMethodExecute     WebsocketMethod = "execute"
	WebsocketMethodPing        WebsocketMethod = "ping"
	WebsocketMethodSubscribe   WebsocketMethod = "subscribe"
	WebsocketMethodUnsubscribe WebsocketMethod = "unsubscribe"
)

// AccountWithdrawRequest defines model for AccountWithdrawRequest.
type AccountWithdrawRequest struct {
	AddressId    int                             `json:"addressId"`
	Amount       string                          `json:"amount"`
	Beneficiary  WithdrawalTravelRuleBeneficiary `json:"beneficiary,omitempty,omitzero"`
	SubaccountId int                             `json:"subaccountId"`
	Symbol       string                          `json:"symbol"`
}

// AccountWithdrawUsingMFARequest defines model for AccountWithdrawUsingMFARequest.
type AccountWithdrawUsingMFARequest struct {
	Address      string                          `json:"address"`
	Amount       string                          `json:"amount"`
	Beneficiary  WithdrawalTravelRuleBeneficiary `json:"beneficiary,omitempty,omitzero"`
	Chain        string                          `json:"chain"`
	IsMoonpay    bool                            `json:"isMoonpay"`
	SubaccountId int                             `json:"subaccountId"`
	Symbol       string                          `json:"symbol"`
}

// AddToWatchlistRequest defines model for AddToWatchlistRequest.
type AddToWatchlistRequest struct {
	Symbol string `json:"symbol"`
}

// Airdrop defines model for Airdrop.
type Airdrop struct {
	Amount       string `json:"amount"`
	AssetSymbol  string `json:"assetSymbol"`
	Id           int    `json:"id"`
	SubaccountId int    `json:"subaccountId"`

	// Time Time in microseconds since unix epoch
	Time   int `json:"time"`
	UserId int `json:"userId"`
}

// AirdropClaim defines model for AirdropClaim.
type AirdropClaim struct {
	Address   string   `json:"address,omitempty,omitzero"`
	Amount    string   `json:"amount,omitempty,omitzero"`
	Claimed   bool     `json:"claimed,omitempty,omitzero"`
	Eligible  bool     `json:"eligible"`
	PassedKYC bool     `json:"passedKYC"`
	Proof     []string `json:"proof,omitempty,omitzero"`
	Wei       string   `json:"wei,omitempty,omitzero"`
}

// Alert defines model for Alert.
type Alert struct {
	Id int `json:"id"`

	// LastUpdated Time in microseconds since unix epoch
	LastUpdated int    `json:"lastUpdated"`
	Message     string `json:"message"`
	Type        string `json:"type"`
}

// AlertPriceType defines model for AlertPriceType.
type AlertPriceType string

// AlertType defines model for AlertType.
type AlertType string

// AllowanceHolderAllowanceIssue defines model for AllowanceHolderAllowanceIssue.
type AllowanceHolderAllowanceIssue struct {
	Actual  string `json:"actual"`
	Spender string `json:"spender"`
}

// AllowanceHolderBalanceIssue defines model for AllowanceHolderBalanceIssue.
type AllowanceHolderBalanceIssue struct {
	Actual   string `json:"actual"`
	Expected string `json:"expected"`
	Token    string `json:"token"`
}

// AllowanceHolderBaseResponse defines model for AllowanceHolderBaseResponse.
type AllowanceHolderBaseResponse struct {
	BlockNumber        string                       `json:"blockNumber,omitzero"`
	BuyAmount          string                       `json:"buyAmount,omitzero"`
	BuyToken           string                       `json:"buyToken,omitzero"`
	Fees               AllowanceHolderFees          `json:"fees,omitempty,omitzero"`
	Gas                string                       `json:"gas,omitzero"`
	GasPrice           string                       `json:"gasPrice,omitzero"`
	Issues             AllowanceHolderIssues        `json:"issues,omitempty,omitzero"`
	LiquidityAvailable bool                         `json:"liquidityAvailable"`
	MinBuyAmount       string                       `json:"minBuyAmount,omitzero"`
	Route              AllowanceHolderRoute         `json:"route,omitempty,omitzero"`
	SellAmount         string                       `json:"sellAmount,omitzero"`
	SellToken          string                       `json:"sellToken,omitzero"`
	TokenMetadata      AllowanceHolderTokenMetadata `json:"tokenMetadata,omitempty,omitzero"`
	TotalNetworkFee    string                       `json:"totalNetworkFee,omitzero"`
	Transaction        AllowanceHolderTransaction   `json:"transaction,omitempty,omitzero"`
	Zid                string                       `json:"zid"`
}

// AllowanceHolderFee defines model for AllowanceHolderFee.
type AllowanceHolderFee struct {
	Amount string `json:"amount"`
	Token  string `json:"token"`
	Type   string `json:"type"`
}

// AllowanceHolderFees defines model for AllowanceHolderFees.
type AllowanceHolderFees struct {
	GasFee        AllowanceHolderFee `json:"gasFee"`
	IntegratorFee AllowanceHolderFee `json:"integratorFee"`
	ZeroExFee     AllowanceHolderFee `json:"zeroExFee"`
}

// AllowanceHolderIssues defines model for AllowanceHolderIssues.
type AllowanceHolderIssues struct {
	Allowance            AllowanceHolderAllowanceIssue `json:"allowance"`
	Balance              AllowanceHolderBalanceIssue   `json:"balance"`
	InvalidSourcesPassed []string                      `json:"invalidSourcesPassed"`
	SimulationIncomplete bool                          `json:"simulationIncomplete"`
}

// AllowanceHolderRoute defines model for AllowanceHolderRoute.
type AllowanceHolderRoute struct {
	Fills  []AllowanceHolderRouteFill  `json:"fills"`
	Tokens []AllowanceHolderRouteToken `json:"tokens"`
}

// AllowanceHolderRouteFill defines model for AllowanceHolderRouteFill.
type AllowanceHolderRouteFill struct {
	From          string `json:"from"`
	ProportionBps string `json:"proportionBps"`
	Source        string `json:"source"`
	To            string `json:"to"`
}

// AllowanceHolderRouteToken defines model for AllowanceHolderRouteToken.
type AllowanceHolderRouteToken struct {
	Address string `json:"address"`
	Symbol  string `json:"symbol"`
}

// AllowanceHolderTokenMetadata defines model for AllowanceHolderTokenMetadata.
type AllowanceHolderTokenMetadata struct {
	BuyToken  AllowanceHolderTokenTaxMetadata `json:"buyToken"`
	SellToken AllowanceHolderTokenTaxMetadata `json:"sellToken"`
}

// AllowanceHolderTokenTaxMetadata defines model for AllowanceHolderTokenTaxMetadata.
type AllowanceHolderTokenTaxMetadata struct {
	BuyTaxBps  string `json:"buyTaxBps"`
	SellTaxBps string `json:"sellTaxBps"`
}

// AllowanceHolderTransaction defines model for AllowanceHolderTransaction.
type AllowanceHolderTransaction struct {
	Data     string `json:"data"`
	Gas      string `json:"gas"`
	GasPrice string `json:"gasPrice"`
	To       string `json:"to"`
	Value    string `json:"value"`
}

// Announcement defines model for Announcement.
type Announcement struct {
	Content string `json:"content"`

	// CreatedAt Time in microseconds since unix epoch
	CreatedAt int `json:"createdAt"`
	Id        int `json:"id"`
}

// ApiKey defines model for ApiKey.
type ApiKey struct {
	// CreatedAt Time in microseconds since unix epoch
	CreatedAt   int      `json:"createdAt"`
	Id          int      `json:"id"`
	IpWhitelist []string `json:"ipWhitelist"`
	Name        string   `json:"name"`
	Read        bool     `json:"read"`
	Write       bool     `json:"write"`
}

// ApiKeyUpdateRequest defines model for ApiKeyUpdateRequest.
type ApiKeyUpdateRequest struct {
	IpWhitelist []string `json:"ipWhitelist"`
	Name        string   `json:"name"`
	Read        bool     `json:"read"`
	Write       bool     `json:"write"`
}

// ApiKeyWithSecret defines model for ApiKeyWithSecret.
type ApiKeyWithSecret struct {
	// CreatedAt Time in microseconds since unix epoch
	CreatedAt   int      `json:"createdAt"`
	Id          int      `json:"id"`
	IpWhitelist []string `json:"ipWhitelist"`
	Key         UUID     `json:"key"`
	Name        string   `json:"name"`
	Read        bool     `json:"read"`

	// Secret Base64 encoded 32 byte secret
	Secret Secret `json:"secret"`
	Write  bool   `json:"write"`
}

// Asset defines model for Asset.
type Asset struct {
	Chains        []Blockchain  `json:"chains"`
	FeaturedPair  string        `json:"featuredPair"`
	ImageUrl      string        `json:"imageUrl"`
	MinDeposit    string        `json:"minDeposit"`
	MinWithdrawal string        `json:"minWithdrawal"`
	MoonPayChain  string        `json:"moonPayChain,omitempty,omitzero"`
	MoonPayCode   string        `json:"moonPayCode,omitempty,omitzero"`
	Name          string        `json:"name"`
	Stablecoin    bool          `json:"stablecoin"`
	Status        ListingStatus `json:"status"`
	Symbol        string        `json:"symbol"`
	WithdrawalFee string        `json:"withdrawalFee"`
}

// Balance defines model for Balance.
type Balance struct {
	Balance          string               `json:"balance"`
	BalanceUSDT      string               `json:"balanceUSDT"`
	Free             string               `json:"free"`
	FreeUSDT         string               `json:"freeUSDT"`
	LastUpdateAmount string               `json:"lastUpdateAmount"`
	LastUpdateId     int                  `json:"lastUpdateId"`
	LastUpdateReason PositionUpdateReason `json:"lastUpdateReason"`

	// LastUpdateTime Time in microseconds since unix epoch
	LastUpdateTime int    `json:"lastUpdateTime"`
	PriceUSDT      string `json:"priceUSDT"`
	SubaccountId   int    `json:"subaccountId"`
	Symbol         string `json:"symbol"`
}

// BalanceSubscriptionParams defines model for BalanceSubscriptionParams.
type BalanceSubscriptionParams struct {
	Snapshot bool `json:"snapshot,omitempty,omitzero"`

	// SnapshotInterval Interval in seconds for getting snapshot data, set to regularly get refreshed snapshot values
	SnapshotInterval SnapshotInterval `json:"snapshotInterval,omitempty,omitzero"`
	SubaccountId     int              `json:"subaccountId,omitempty,omitzero"`
}

// BalanceUpdate defines model for BalanceUpdate.
type BalanceUpdate struct {
	Amount       string               `json:"amount"`
	AssetSymbol  string               `json:"assetSymbol"`
	Balance      string               `json:"balance"`
	Id           int                  `json:"id"`
	Reason       PositionUpdateReason `json:"reason"`
	SubaccountId int                  `json:"subaccountId"`

	// Time Time in microseconds since unix epoch
	Time int `json:"time"`
}

// Blockchain defines model for Blockchain.
type Blockchain struct {
	AssetSymbol   string `json:"assetSymbol"`
	BlockTime     int    `json:"blockTime"`
	Confirmations int    `json:"confirmations"`
	Name          string `json:"name"`
	Symbol        string `json:"symbol"`
	Type          int    `json:"type"`
}

// CancelAllRequest defines model for CancelAllRequest.
type CancelAllRequest struct {
	SubaccountId int `json:"subaccountId"`

	// TimeToCancel Time to cancel all orders, 0 for immediate. Granularity is 1 second. Use this to set a dead man's switch.
	TimeToCancel int `json:"timeToCancel"`
}

// CancelAllResponse defines model for CancelAllResponse.
type CancelAllResponse = map[string]interface{}

// CancelAllTriggerOrdersRequest defines model for CancelAllTriggerOrdersRequest.
type CancelAllTriggerOrdersRequest struct {
	SubaccountId     int         `json:"subaccountId"`
	Symbol           string      `json:"symbol"`
	TriggerPriceType interface{} `json:"triggerPriceType,omitempty,omitzero"`
}

// CancelAllTriggerOrdersResponse defines model for CancelAllTriggerOrdersResponse.
type CancelAllTriggerOrdersResponse struct {
	SubaccountId     int         `json:"subaccountId"`
	Symbol           string      `json:"symbol"`
	TriggerPriceType interface{} `json:"triggerPriceType,omitempty,omitzero"`
}

// CancelOrderRequest defines model for CancelOrderRequest.
type CancelOrderRequest struct {
	// ClientOrderId client order ID to cancel, required if orderId is not provided
	ClientOrderId string `json:"clientOrderId,omitempty,omitzero"`

	// OrderId order ID to cancel, required if clientOrderId is not provided
	OrderId      int `json:"orderId,omitempty,omitzero"`
	SubaccountId int `json:"subaccountId,omitempty,omitzero"`

	// TimeToCancel Time to cancel the order, 0 for immediate. Granularity is 1 second.
	TimeToCancel int `json:"timeToCancel,omitempty,omitzero"`
}

// CancelOrderResponse defines model for CancelOrderResponse.
type CancelOrderResponse struct {
	OrderId int `json:"orderId"`
}

// CancelReplaceOrderRequest defines model for CancelReplaceOrderRequest.
type CancelReplaceOrderRequest struct {
	// CancelClientOrderId Client Order ID of the order to cancel and replace with the new order
	CancelClientOrderId string `json:"cancelClientOrderId,omitempty,omitzero"`

	// CancelOrderId ID of the order to cancel and replace with the new order
	CancelOrderId int `json:"cancelOrderId,omitempty,omitzero"`

	// CancelSubaccountId Subaccount ID of the order to cancel and replace with the new order
	CancelSubaccountId int    `json:"cancelSubaccountId,omitempty,omitzero"`
	ClientOrderId      string `json:"clientOrderId,omitzero"`

	// PostOnly if true, the order will be closed if it can be matched immediately. Only supported on limit gtc orders.
	PostOnly bool `json:"postOnly,omitempty,omitzero"`

	// Price limit price, 0 for market orders
	Price string `json:"price,omitempty,omitzero"`

	// ReduceOnly if true, the order will only reduce the position size.
	ReduceOnly   bool      `json:"reduceOnly,omitempty,omitzero"`
	Side         OrderSide `json:"side"`
	Size         string    `json:"size"`
	SubaccountId int       `json:"subaccountId,omitempty,omitzero"`
	Symbol       string    `json:"symbol"`
	Type         OrderType `json:"type"`
}

// CancelReplaceOrderResponse defines model for CancelReplaceOrderResponse.
type CancelReplaceOrderResponse struct {
	CancelResponse CancelOrderResponse `json:"cancelResponse,omitempty,omitzero"`
	CreateResponse CreateOrderResponse `json:"createResponse,omitempty,omitzero"`
}

// CancelTriggerOrderRequest defines model for CancelTriggerOrderRequest.
type CancelTriggerOrderRequest struct {
	ClientOrderId    string      `json:"clientOrderId,omitempty,omitzero"`
	SubaccountId     int         `json:"subaccountId,omitempty,omitzero"`
	Symbol           string      `json:"symbol"`
	TriggerOrderId   int         `json:"triggerOrderId,omitempty,omitzero"`
	TriggerPriceType interface{} `json:"triggerPriceType,omitempty,omitzero"`
}

// CancelTriggerOrderResponse defines model for CancelTriggerOrderResponse.
type CancelTriggerOrderResponse struct {
	ClientOrderId    string      `json:"clientOrderId,omitempty,omitzero"`
	SubaccountId     int         `json:"subaccountId,omitempty,omitzero"`
	Symbol           string      `json:"symbol"`
	TriggerOrderId   int         `json:"triggerOrderId,omitempty,omitzero"`
	TriggerPriceType interface{} `json:"triggerPriceType,omitempty,omitzero"`
}

// Candle defines model for Candle.
type Candle struct {
	Close       string `json:"close"`
	Duration    int    `json:"duration"`
	High        string `json:"high"`
	Low         string `json:"low"`
	Open        string `json:"open"`
	QuoteVolume string `json:"quoteVolume"`
	Symbol      string `json:"symbol"`

	// Time Time in microseconds since unix epoch
	Time   int    `json:"time"`
	Volume string `json:"volume"`
}

// CandleDuration defines model for CandleDuration.
type CandleDuration string

// CandleSubscriptionParams defines model for CandleSubscriptionParams.
type CandleSubscriptionParams struct {
	Duration CandleDuration `json:"duration,omitempty,omitzero"`
	Symbol   string         `json:"symbol"`
}

// Commission defines model for Commission.
type Commission struct {
	Amount       string `json:"amount"`
	AssetSymbol  string `json:"assetSymbol"`
	Id           int    `json:"id"`
	SubaccountId int    `json:"subaccountId"`

	// Time Time in microseconds since unix epoch
	Time   int `json:"time"`
	UserId int `json:"userId"`
}

// CompetitionOptInRequest defines model for CompetitionOptInRequest.
type CompetitionOptInRequest struct {
	CompetitionId int `json:"competition_id"`
}

// ConfirmWithdrawalAddressRequest defines model for ConfirmWithdrawalAddressRequest.
type ConfirmWithdrawalAddressRequest struct {
	Code UUID `json:"code"`
}

// CreateAirdropAddressRequest defines model for CreateAirdropAddressRequest.
type CreateAirdropAddressRequest struct {
	Address string `json:"address"`
}

// CreateApiKeyRequest defines model for CreateApiKeyRequest.
type CreateApiKeyRequest struct {
	IpWhitelist []string `json:"ipWhitelist"`
	Name        string   `json:"name"`
	Read        bool     `json:"read"`
	Write       bool     `json:"write"`
}

// CreateOrderRequest defines model for CreateOrderRequest.
type CreateOrderRequest struct {
	ClientOrderId string `json:"clientOrderId,omitzero"`

	// PostOnly if true, the order will be closed if it can be matched immediately. Only supported on limit gtc orders.
	PostOnly bool `json:"postOnly,omitempty,omitzero"`

	// Price limit price, 0 for market orders
	Price string `json:"price,omitempty,omitzero"`

	// ReduceOnly if true, the order will only reduce the position size.
	ReduceOnly   bool      `json:"reduceOnly,omitempty,omitzero"`
	Side         OrderSide `json:"side"`
	Size         string    `json:"size"`
	SubaccountId int       `json:"subaccountId,omitempty,omitzero"`
	Symbol       string    `json:"symbol"`
	Type         OrderType `json:"type"`
}

// CreateOrderResponse defines model for CreateOrderResponse.
type CreateOrderResponse struct {
	ClientOrderId string    `json:"clientOrderId,omitempty,omitzero"`
	OrderId       int       `json:"orderId"`
	Price         string    `json:"price"`
	Side          OrderSide `json:"side"`
	Size          string    `json:"size"`
	SubaccountId  int       `json:"subaccountId"`
	Symbol        string    `json:"symbol"`

	// Time Time in microseconds since unix epoch
	Time int       `json:"time"`
	Type OrderType `json:"type"`
}

// CreateOrdersBatchRequest defines model for CreateOrdersBatchRequest.
type CreateOrdersBatchRequest struct {
	Orders []CreateOrderRequest `json:"orders"`
}

// CreateOrdersBatchResponse defines model for CreateOrdersBatchResponse.
type CreateOrdersBatchResponse struct {
	Orders []OrderBatchItem `json:"orders"`
}

// CreatePerpTransferRequest defines model for CreatePerpTransferRequest.
type CreatePerpTransferRequest struct {
	FromSubaccountId int    `json:"fromSubaccountId"`
	Symbol           string `json:"symbol"`
	ToSubaccountId   int    `json:"toSubaccountId"`
}

// CreatePerpTransferResponse defines model for CreatePerpTransferResponse.
type CreatePerpTransferResponse struct {
	TransferId int `json:"transferId"`
}

// CreateSimpleOrderRequest defines model for CreateSimpleOrderRequest.
type CreateSimpleOrderRequest struct {
	Side         OrderSide `json:"side"`
	Size         string    `json:"size"`
	SubaccountId int       `json:"subaccountId"`
	Symbol       string    `json:"symbol"`
}

// CreateSubaccountRequest defines model for CreateSubaccountRequest.
type CreateSubaccountRequest struct {
	Name string `json:"name"`
}

// CreateSubaccountResponse defines model for CreateSubaccountResponse.
type CreateSubaccountResponse struct {
	Id int `json:"id"`
}

// CreateTransferRequest defines model for CreateTransferRequest.
type CreateTransferRequest struct {
	Amount           string `json:"amount"`
	FromSubaccountId int    `json:"fromSubaccountId"`
	Symbol           string `json:"symbol"`
	ToSubaccountId   int    `json:"toSubaccountId"`
}

// CreateTransferResponse defines model for CreateTransferResponse.
type CreateTransferResponse struct {
	TransferId int `json:"transferId"`
}

// CreateTriggerOrderRequest defines model for CreateTriggerOrderRequest.
type CreateTriggerOrderRequest struct {
	ClientOrderId string `json:"clientOrderId,omitzero"`

	// PostOnly if true, the order will be closed if it can be matched immediately. Only supported on limit gtc orders.
	PostOnly bool `json:"postOnly,omitempty,omitzero"`

	// Price limit price, 0 for market orders
	Price string `json:"price,omitempty,omitzero"`

	// ReduceOnly if true, the order will only reduce the position size.
	ReduceOnly       bool             `json:"reduceOnly,omitempty,omitzero"`
	Side             OrderSide        `json:"side"`
	Size             string           `json:"size"`
	SubaccountId     int              `json:"subaccountId,omitempty,omitzero"`
	Symbol           string           `json:"symbol"`
	TriggerPrice     string           `json:"triggerPrice"`
	TriggerPriceType TriggerPriceType `json:"triggerPriceType"`
	TriggerType      TriggerType      `json:"triggerType"`
	Type             OrderType        `json:"type"`
}

// CreateTriggerOrderResponse defines model for CreateTriggerOrderResponse.
type CreateTriggerOrderResponse struct {
	Price          string    `json:"price"`
	Side           OrderSide `json:"side"`
	Size           string    `json:"size"`
	Symbol         string    `json:"symbol"`
	TriggerOrderId int       `json:"triggerOrderId"`
	Type           OrderType `json:"type"`
}

// CreateWithdrawalAddressRequest defines model for CreateWithdrawalAddressRequest.
type CreateWithdrawalAddressRequest struct {
	Address string `json:"address"`
	Chain   string `json:"chain"`
	Label   string `json:"label"`
	Memo    int    `json:"memo,omitzero"`
}

// DeleteSessionRequest defines model for DeleteSessionRequest.
type DeleteSessionRequest struct {
	SessionId int `json:"sessionId"`
}

// Deposit defines model for Deposit.
type Deposit struct {
	Amount         string `json:"amount"`
	Chain          string `json:"chain"`
	Confirmed      bool   `json:"confirmed"`
	DepositAddress string `json:"depositAddress"`
	Id             int    `json:"id"`
	Price          string `json:"price"`
	Symbol         string `json:"symbol"`

	// Time Time in microseconds since unix epoch
	Time            int    `json:"time"`
	TransactionHash string `json:"transactionHash"`
}

// DepositAddressesResponse defines model for DepositAddressesResponse.
type DepositAddressesResponse struct {
	Addresses []string `json:"addresses"`
}

// DexSubmitRequest defines model for DexSubmitRequest.
type DexSubmitRequest struct {
	Zid string `json:"zid"`
}

// DexToken defines model for DexToken.
type DexToken struct {
	Address  string `json:"address"`
	ChainId  int    `json:"chainId"`
	Decimals int    `json:"decimals"`
	LogoURI  string `json:"logoURI,omitzero"`
	Name     string `json:"name"`
	Symbol   string `json:"symbol"`
}

// DexTradeHistoryItem defines model for DexTradeHistoryItem.
type DexTradeHistoryItem struct {
	BuyAmount        string    `json:"buyAmount,omitempty,omitzero"`
	BuyTokenAddress  string    `json:"buyTokenAddress,omitzero"`
	BuyTokenName     string    `json:"buyTokenName,omitzero"`
	ChainId          int       `json:"chainId,omitzero"`
	IntegratorFeeUsd string    `json:"integratorFeeUsd,omitempty,omitzero"`
	SellAmount       string    `json:"sellAmount,omitempty,omitzero"`
	SellTokenAddress string    `json:"sellTokenAddress,omitzero"`
	SellTokenName    string    `json:"sellTokenName,omitzero"`
	Taker            string    `json:"taker"`
	TradeTimestamp   time.Time `json:"tradeTimestamp"`
	TransactionHash  string    `json:"transactionHash,omitzero"`
	VolumeUsd        int       `json:"volumeUsd"`
	Zid              string    `json:"zid"`
}

// Error defines model for Error.
type Error struct {
	// Id The unique identifier for the error
	Id ErrorId `json:"id"`

	// Message Additional details about the error
	Message string `json:"message"`

	// Name The name of the error
	Name ErrorName `json:"name"`
}

// ErrorCode defines model for ErrorCode.
type ErrorCode int

// ErrorId The unique identifier for the error
type ErrorId int

// ErrorName The name of the error
type ErrorName string

// Exchange defines model for Exchange.
type Exchange string

// FormDataAuthenticateRequest defines model for FormDataAuthenticateRequest.
type FormDataAuthenticateRequest struct {
	RedirectPath string `json:"redirectPath"`
	TradeInToken string `json:"tradeInToken"`
}

// FundingRatePayment defines model for FundingRatePayment.
type FundingRatePayment struct {
	Amount       string `json:"amount"`
	AssetSymbol  string `json:"assetSymbol"`
	Id           int    `json:"id"`
	IndexPrice   string `json:"indexPrice"`
	PairSymbol   string `json:"pairSymbol"`
	SubaccountId int    `json:"subaccountId"`

	// Time Time in microseconds since unix epoch
	Time   int `json:"time"`
	UserId int `json:"userId"`
}

// HistoricBalance defines model for HistoricBalance.
type HistoricBalance struct {
	Amount string `json:"amount"`

	// Time Time in microseconds since unix epoch
	Time int `json:"time"`
}

// IPInfo defines model for IPInfo.
type IPInfo struct {
	Location IPInfoLocation `json:"location"`
	Privacy  IPInfoPrivacy  `json:"privacy"`
}

// IPInfoLocation defines model for IPInfoLocation.
type IPInfoLocation struct {
	City       string  `json:"city,omitzero"`
	Country    string  `json:"country,omitzero"`
	Latitude   float32 `json:"latitude,omitzero"`
	Longitude  float32 `json:"longitude,omitzero"`
	PostalCode string  `json:"postalCode,omitzero"`
	Region     string  `json:"region,omitzero"`
	Timezone   string  `json:"timezone,omitzero"`
}

// IPInfoPrivacy defines model for IPInfoPrivacy.
type IPInfoPrivacy struct {
	Hosting bool   `json:"hosting"`
	Proxy   bool   `json:"proxy"`
	Relay   bool   `json:"relay"`
	Service string `json:"service,omitzero"`
	Tor     bool   `json:"tor"`
	Vpn     bool   `json:"vpn"`
}

// IndexPrice defines model for IndexPrice.
type IndexPrice struct {
	Constituents []IndexPriceConstituent `json:"constituents"`
	Price        string                  `json:"price"`
	Symbol       string                  `json:"symbol"`

	// Time Time in microseconds since unix epoch
	Time int `json:"time"`
}

// IndexPriceConstituent defines model for IndexPriceConstituent.
type IndexPriceConstituent struct {
	Exchange Exchange `json:"exchange"`
	Price    string   `json:"price"`

	// Time Time of the last update according to the exchange
	Time   int    `json:"time"`
	Weight string `json:"weight"`
}

// L1OrderBook defines model for L1OrderBook.
type L1OrderBook struct {
	AskPrice   string `json:"askPrice,omitempty,omitzero"`
	AskSize    string `json:"askSize,omitempty,omitzero"`
	BidPrice   string `json:"bidPrice,omitempty,omitzero"`
	BidSize    string `json:"bidSize,omitempty,omitzero"`
	RevisionId int    `json:"revisionId"`
	Symbol     string `json:"symbol"`

	// Time Time in microseconds since unix epoch
	Time int `json:"time"`
}

// L1OrderBookSubscriptionParams defines model for L1OrderBookSubscriptionParams.
type L1OrderBookSubscriptionParams struct {
	Snapshot bool   `json:"snapshot,omitempty,omitzero"`
	Symbol   string `json:"symbol"`
}

// L2OrderBookSubscriptionParams defines model for L2OrderBookSubscriptionParams.
type L2OrderBookSubscriptionParams struct {
	// Group Price group for aggregation, must be a multiple of 1, 10, 100 or 1000 of the tick size. Default is the tick size.
	Group    string `json:"group,omitempty,omitzero"`
	Snapshot bool   `json:"snapshot,omitempty,omitzero"`
	Symbol   string `json:"symbol"`
}

// L2Update defines model for L2Update.
type L2Update struct {
	Group      string    `json:"group"`
	Price      string    `json:"price"`
	RevisionId int       `json:"revisionId"`
	Side       OrderSide `json:"side"`
	Size       string    `json:"size"`
	Symbol     string    `json:"symbol"`

	// Time Time in microseconds since unix epoch
	Time int `json:"time"`
}

// LiquidationPrice defines model for LiquidationPrice.
type LiquidationPrice struct {
	Price        string `json:"price,omitempty,omitzero"`
	SubaccountId int    `json:"subaccountId"`
	Symbol       string `json:"symbol"`
}

// ListingStatus defines model for ListingStatus.
type ListingStatus string

// Locale defines model for Locale.
type Locale string

// LspAssignment defines model for LspAssignment.
type LspAssignment struct {
	Base         string `json:"base"`
	Id           int    `json:"id"`
	PairSymbol   string `json:"pairSymbol"`
	Price        string `json:"price"`
	Quote        string `json:"quote"`
	SubaccountId int    `json:"subaccountId"`

	// Time Time in microseconds since unix epoch
	Time   int `json:"time"`
	UserId int `json:"userId"`
}

// LspAssignmentSubscriptionParams defines model for LspAssignmentSubscriptionParams.
type LspAssignmentSubscriptionParams struct {
	SubaccountId int `json:"subaccountId,omitempty,omitzero"`
}

// LspSetting defines model for LspSetting.
type LspSetting struct {
	MaxAssignmentNotional string `json:"maxAssignmentNotional"`
	MaxExposureNotional   string `json:"maxExposureNotional"`
	Symbol                string `json:"symbol"`
}

// Margin defines model for Margin.
type Margin struct {
	// Available Total margin available for opening new positions
	Available string `json:"available"`

	// Bonus Total margin bonus
	Bonus string `json:"bonus"`

	// Initial Initial margin required to open a position
	Initial string `json:"initial"`

	// Liquidation Amount of Margin required to prevent portfolio liquidations
	Liquidation string `json:"liquidation"`

	// Locked Total margin locked due to open positions and open orders
	Locked string `json:"locked"`

	// Maintenance Amount of Margin required to prevent partial liquidations
	Maintenance string `json:"maintenance"`

	// Pnl Total unrealized PnL
	Pnl          string `json:"pnl"`
	SubaccountId int    `json:"subaccountId"`

	// Total Total margin in the account, includes unrealized PnL
	Total string `json:"total"`

	// TotalAssetValue Total value of all assets in the account in USDT
	TotalAssetValue string `json:"totalAssetValue"`
}

// MarginSchedule defines model for MarginSchedule.
type MarginSchedule struct {
	Bands []MarginScheduleBand `json:"bands"`

	// Name Margin schedule name
	Name MarginScheduleName `json:"name"`
}

// MarginScheduleBand defines model for MarginScheduleBand.
type MarginScheduleBand struct {
	// LeverageRate leverage rate applied in this band
	LeverageRate string `json:"leverageRate"`

	// MarginRate Initial margin rate applied in this band
	MarginRate string `json:"marginRate"`

	// PositionLimit Maximum position size for this band
	PositionLimit string `json:"positionLimit"`

	// Rebate Initial margin rebate applied in this band
	Rebate string `json:"rebate"`
}

// MarginScheduleName Margin schedule name
type MarginScheduleName string

// MarginSubscriptionParams defines model for MarginSubscriptionParams.
type MarginSubscriptionParams struct {
	Snapshot bool `json:"snapshot,omitempty,omitzero"`

	// SnapshotInterval Interval in seconds for getting snapshot data, set to regularly get refreshed snapshot values
	SnapshotInterval SnapshotInterval `json:"snapshotInterval,omitempty,omitzero"`
	SubaccountId     int              `json:"subaccountId,omitempty,omitzero"`
}

// MarkReadNotificationsRequest defines model for MarkReadNotificationsRequest.
type MarkReadNotificationsRequest struct {
	// LastReadTime Time in microseconds since unix epoch
	LastReadTime int `json:"lastReadTime"`
}

// MarketCapHistoricData defines model for MarketCapHistoricData.
type MarketCapHistoricData struct {
	MarketCapChart struct {
		MarketCap [][]float32 `json:"market_cap"`
		Volume    [][]float32 `json:"volume"`
	} `json:"market_cap_chart"`
}

// MarketCapResponse defines model for MarketCapResponse.
type MarketCapResponse struct {
	MarketCapChangePercentage24hUsd float32 `json:"market_cap_change_percentage_24h_usd"`
	MarketCapPercentageBtc          float32 `json:"market_cap_percentage_btc"`
	TotalMarketCap                  float32 `json:"total_market_cap"`
}

// NewDepositAddressRequest defines model for NewDepositAddressRequest.
type NewDepositAddressRequest struct {
	Chain        string `json:"chain"`
	SubaccountId int    `json:"subaccountId"`
}

// NewDepositAddressResponse defines model for NewDepositAddressResponse.
type NewDepositAddressResponse struct {
	Address string `json:"address"`
}

// Notification defines model for Notification.
type Notification struct {
	Id           int    `json:"id"`
	IsRead       bool   `json:"isRead"`
	Message      string `json:"message"`
	OrderId      int    `json:"orderId,omitempty,omitzero"`
	SubaccountId int    `json:"subaccountId"`
	Symbol       string `json:"symbol,omitempty,omitzero"`

	// Time Time in microseconds since unix epoch
	Time  int              `json:"time"`
	Title string           `json:"title"`
	Type  NotificationType `json:"type"`
}

// NotificationType defines model for NotificationType.
type NotificationType string

// Order defines model for Order.
type Order struct {
	// ArkmFeePaid Total ARKM fee paid so far in the order
	ArkmFeePaid string `json:"arkmFeePaid"`

	// AvgPrice Average price filled so far in the order
	AvgPrice      string `json:"avgPrice"`
	ClientOrderId string `json:"clientOrderId,omitempty,omitzero"`

	// CreditFeePaid Total fee paid via credits so far in the order
	CreditFeePaid string `json:"creditFeePaid"`

	// ExecutedNotional Total notional value filled so far in the order, 0 if no fills
	ExecutedNotional string `json:"executedNotional"`

	// ExecutedSize Total quantity filled so far in the order
	ExecutedSize string `json:"executedSize"`

	// LastArkmFee ARKM fee paid for the last trade, only present on taker and maker statuses
	LastArkmFee string `json:"lastArkmFee"`

	// LastCreditFee Credit fee paid for the last trade, only present on taker and maker statuses
	LastCreditFee string `json:"lastCreditFee"`

	// LastMarginBonusFee Margin bonus fee paid for the last trade, only present on taker and maker statuses
	LastMarginBonusFee string `json:"lastMarginBonusFee"`

	// LastPrice Price of the last trade, only present on taker and maker statuses
	LastPrice string `json:"lastPrice"`

	// LastQuoteFee Quote fee paid for the last trade, only present on taker and maker statuses
	LastQuoteFee string `json:"lastQuoteFee"`

	// LastSize Size of the last trade, only present on taker and maker statuses
	LastSize string `json:"lastSize"`

	// LastTime Time of the last status update on the order
	LastTime int `json:"lastTime"`

	// MarginBonusFeePaid Total fee paid via margin bonus so far in the order
	MarginBonusFeePaid string `json:"marginBonusFeePaid"`
	OrderId            int    `json:"orderId"`

	// PostOnly If true the order is post-only
	PostOnly bool `json:"postOnly"`

	// Price The original price of the order
	Price string `json:"price"`

	// QuoteFeePaid Total quote fee paid so far in the order
	QuoteFeePaid string `json:"quoteFeePaid"`

	// ReduceOnly If true the order is reduce-only
	ReduceOnly bool `json:"reduceOnly"`

	// RevisionId An identifier for the order's current state, unique to the pair
	RevisionId int       `json:"revisionId"`
	Side       OrderSide `json:"side"`

	// Size The original size of the order
	Size         string      `json:"size"`
	Status       OrderStatus `json:"status"`
	SubaccountId int         `json:"subaccountId"`
	Symbol       string      `json:"symbol"`

	// Time Time in microseconds since unix epoch
	Time int `json:"time"`

	// TriggerOrderId The ID of the trigger order that created this order, if any
	TriggerOrderId int       `json:"triggerOrderId,omitempty,omitzero"`
	Type           OrderType `json:"type"`
	UserId         int       `json:"userId"`
}

// OrderBatchItem defines model for OrderBatchItem.
type OrderBatchItem struct {
	ClientOrderId string    `json:"clientOrderId,omitempty,omitzero"`
	Error         Error     `json:"error,omitempty,omitzero"`
	OrderId       int       `json:"orderId,omitempty,omitzero"`
	Price         string    `json:"price"`
	Side          OrderSide `json:"side"`
	Size          string    `json:"size"`
	SubaccountId  int       `json:"subaccountId"`
	Symbol        string    `json:"symbol"`
	Type          OrderType `json:"type"`
}

// OrderBook defines model for OrderBook.
type OrderBook struct {
	Asks  []OrderBookEntry `json:"asks"`
	Bids  []OrderBookEntry `json:"bids"`
	Group string           `json:"group"`

	// LastTime Time in microseconds since unix epoch
	LastTime int    `json:"lastTime"`
	Symbol   string `json:"symbol"`
}

// OrderBookEntry defines model for OrderBookEntry.
type OrderBookEntry struct {
	Price string `json:"price"`
	Size  string `json:"size"`
}

// OrderHistoryWithTotalResponse defines model for OrderHistoryWithTotalResponse.
type OrderHistoryWithTotalResponse struct {
	Orders []Order `json:"orders"`
	Total  int     `json:"total"`
}

// OrderSide defines model for OrderSide.
type OrderSide string

// OrderStatus defines model for OrderStatus.
type OrderStatus string

// OrderStatusSubscriptionParams defines model for OrderStatusSubscriptionParams.
type OrderStatusSubscriptionParams struct {
	Snapshot     bool `json:"snapshot,omitempty,omitzero"`
	SubaccountId int  `json:"subaccountId,omitempty,omitzero"`
}

// OrderType defines model for OrderType.
type OrderType string

// Pair defines model for Pair.
type Pair struct {
	BaseImageUrl     string             `json:"baseImageUrl"`
	BaseIsStablecoin bool               `json:"baseIsStablecoin"`
	BaseName         string             `json:"baseName"`
	BaseSymbol       string             `json:"baseSymbol"`
	MarginSchedule   PairMarginSchedule `json:"marginSchedule,omitempty,omitzero"`
	MaxLeverage      string             `json:"maxLeverage,omitempty,omitzero"`
	MaxPrice         string             `json:"maxPrice"`

	// MaxPriceScalarDown Orders rejected if price is less than this scalar times the index price
	MaxPriceScalarDown string `json:"maxPriceScalarDown"`

	// MaxPriceScalarUp Orders rejected if price is greater than this scalar times the index price
	MaxPriceScalarUp string `json:"maxPriceScalarUp"`
	MaxSize          string `json:"maxSize"`
	MinLotSize       string `json:"minLotSize"`

	// MinNotional Minimum notional (price * size) for orders
	MinNotional       string        `json:"minNotional"`
	MinPrice          string        `json:"minPrice"`
	MinSize           string        `json:"minSize"`
	MinTickPrice      string        `json:"minTickPrice"`
	PairType          PairType      `json:"pairType"`
	QuoteImageUrl     string        `json:"quoteImageUrl"`
	QuoteIsStablecoin bool          `json:"quoteIsStablecoin"`
	QuoteName         string        `json:"quoteName"`
	QuoteSymbol       string        `json:"quoteSymbol"`
	Status            ListingStatus `json:"status"`
	Symbol            string        `json:"symbol"`
}

// PairMarginSchedule defines model for Pair.MarginSchedule.
type PairMarginSchedule string

// PairType defines model for PairType.
type PairType string

// Position defines model for Position.
type Position struct {
	AverageEntryPrice    string               `json:"averageEntryPrice"`
	Base                 string               `json:"base"`
	BreakEvenPrice       string               `json:"breakEvenPrice,omitempty,omitzero"`
	InitialMargin        string               `json:"initialMargin"`
	LastUpdateBaseDelta  string               `json:"lastUpdateBaseDelta"`
	LastUpdateId         int                  `json:"lastUpdateId"`
	LastUpdateQuoteDelta string               `json:"lastUpdateQuoteDelta"`
	LastUpdateReason     PositionUpdateReason `json:"lastUpdateReason"`

	// LastUpdateTime Time in microseconds since unix epoch
	LastUpdateTime    int    `json:"lastUpdateTime"`
	MaintenanceMargin string `json:"maintenanceMargin"`
	MarkPrice         string `json:"markPrice"`
	OpenBuyNotional   string `json:"openBuyNotional"`
	OpenBuySize       string `json:"openBuySize"`
	OpenSellNotional  string `json:"openSellNotional"`
	OpenSellSize      string `json:"openSellSize"`
	Pnl               string `json:"pnl"`
	Quote             string `json:"quote"`
	SubaccountId      int    `json:"subaccountId"`
	Symbol            string `json:"symbol"`
	Value             string `json:"value"`
}

// PositionLeverage defines model for PositionLeverage.
type PositionLeverage struct {
	Leverage string `json:"leverage"`
	Symbol   string `json:"symbol"`
}

// PositionSubscriptionParams defines model for PositionSubscriptionParams.
type PositionSubscriptionParams struct {
	Snapshot bool `json:"snapshot,omitempty,omitzero"`

	// SnapshotInterval Interval in seconds for getting snapshot data, set to regularly get refreshed snapshot values
	SnapshotInterval SnapshotInterval `json:"snapshotInterval,omitempty,omitzero"`
	SubaccountId     int              `json:"subaccountId,omitempty,omitzero"`
}

// PositionUpdate defines model for PositionUpdate.
type PositionUpdate struct {
	AvgEntryPrice string               `json:"avgEntryPrice"`
	Base          string               `json:"base"`
	BaseDelta     string               `json:"baseDelta"`
	Id            int                  `json:"id"`
	PairSymbol    string               `json:"pairSymbol"`
	Quote         string               `json:"quote"`
	QuoteDelta    string               `json:"quoteDelta"`
	Reason        PositionUpdateReason `json:"reason"`
	SubaccountId  int                  `json:"subaccountId"`

	// Time Time in microseconds since unix epoch
	Time int `json:"time"`
}

// PositionUpdateReason defines model for PositionUpdateReason.
type PositionUpdateReason string

// PriceAlert defines model for PriceAlert.
type PriceAlert struct {
	AlertPrice     string         `json:"alertPrice"`
	AlertPriceType AlertPriceType `json:"alertPriceType"`
	Symbol         string         `json:"symbol"`
}

// PublicTradesResponse defines model for PublicTradesResponse.
type PublicTradesResponse = []Trade

// RealizedPnl defines model for RealizedPnl.
type RealizedPnl struct {
	Amount       string `json:"amount"`
	AssetSymbol  string `json:"assetSymbol"`
	Id           int    `json:"id"`
	PairSymbol   string `json:"pairSymbol"`
	SubaccountId int    `json:"subaccountId"`

	// Time Time in microseconds since unix epoch
	Time   int `json:"time"`
	UserId int `json:"userId"`
}

// Rebate defines model for Rebate.
type Rebate struct {
	Amount       string `json:"amount"`
	AssetSymbol  string `json:"assetSymbol"`
	Id           int    `json:"id"`
	SubaccountId int    `json:"subaccountId"`

	// Time Time in microseconds since unix epoch
	Time   int `json:"time"`
	UserId int `json:"userId"`
}

// ReferralLink defines model for ReferralLink.
type ReferralLink struct {
	// CreatedAt Time in microseconds since unix epoch
	CreatedAt int `json:"createdAt"`

	// DeletedAt Time in microseconds since unix epoch
	DeletedAt int    `json:"deletedAt,omitempty,omitzero"`
	Id        string `json:"id"`

	// LastUsedAt Time in microseconds since unix epoch
	LastUsedAt int    `json:"lastUsedAt,omitempty,omitzero"`
	Slug       string `json:"slug,omitzero"`
	Uses       int    `json:"uses"`
}

// ReferralLinkId defines model for ReferralLinkId.
type ReferralLinkId = []int

// ReferralLinkResponse defines model for ReferralLinkResponse.
type ReferralLinkResponse struct {
	LinkId ReferralLinkId `json:"linkId"`
}

// RemoveFromWatchlistRequest defines model for RemoveFromWatchlistRequest.
type RemoveFromWatchlistRequest struct {
	Symbol string `json:"symbol"`
}

// RewardType defines model for RewardType.
type RewardType string

// RewardsInfo defines model for RewardsInfo.
type RewardsInfo struct {
	FeeCredit string `json:"feeCredit"`

	// FeeCreditExpires Time in microseconds since unix epoch
	FeeCreditExpires int    `json:"feeCreditExpires"`
	MarginBonus      string `json:"marginBonus"`

	// MarginBonusExpires Time in microseconds since unix epoch
	MarginBonusExpires int    `json:"marginBonusExpires"`
	Points             int    `json:"points"`
	TradingFeeDiscount string `json:"tradingFeeDiscount"`

	// TradingFeeDiscountExpires Time in microseconds since unix epoch
	TradingFeeDiscountExpires int `json:"tradingFeeDiscountExpires"`
}

// RewardsVoucher defines model for RewardsVoucher.
type RewardsVoucher struct {
	ActionDescription string                    `json:"actionDescription"`
	Bullets           []string                  `json:"bullets"`
	Conditions        []RewardsVoucherCondition `json:"conditions"`
	ConditionsJSON    string                    `json:"conditionsJSON"`

	// CreatedAt Time in microseconds since unix epoch
	CreatedAt        int           `json:"createdAt"`
	Id               int           `json:"id"`
	Name             string        `json:"name"`
	SequenceId       int           `json:"sequenceId,omitzero"`
	SequencePosition int           `json:"sequencePosition,omitzero"`
	Status           VoucherStatus `json:"status"`
	Type             RewardType    `json:"type"`
}

// RewardsVoucherCondition defines model for RewardsVoucherCondition.
type RewardsVoucherCondition struct {
	Action          string               `json:"action"`
	Completed       float32              `json:"completed"`
	ProgressSummary string               `json:"progressSummary"`
	ProgressText    string               `json:"progressText"`
	Type            VoucherConditionType `json:"type"`
}

// Secret Base64 encoded 32 byte secret
type Secret = string

// ServerTimeResponse defines model for ServerTimeResponse.
type ServerTimeResponse struct {
	// ServerTime Time in microseconds since unix epoch
	ServerTime int `json:"serverTime"`
}

// Session defines model for Session.
type Session struct {
	CreatedAt     time.Time `json:"createdAt"`
	DeletedAt     time.Time `json:"deletedAt,omitzero"`
	ExpiresAt     time.Time `json:"expiresAt"`
	Id            int       `json:"id"`
	IpAddress     string    `json:"ipAddress"`
	IpApproved    bool      `json:"ipApproved"`
	IpInfo        IPInfo    `json:"ipInfo"`
	LastMfaAt     time.Time `json:"lastMfaAt,omitzero"`
	LastUsedAt    time.Time `json:"lastUsedAt"`
	MaxExpiration time.Time `json:"maxExpiration,omitzero"`
	UpdatedAt     time.Time `json:"updatedAt"`
	UserAgent     string    `json:"userAgent"`
	UserId        int       `json:"userId"`
}

// SessionsResponse defines model for SessionsResponse.
type SessionsResponse struct {
	CurrentSession int       `json:"currentSession"`
	Sessions       []Session `json:"sessions"`
}

// SetPositionLeverageRequest defines model for SetPositionLeverageRequest.
type SetPositionLeverageRequest struct {
	Leverage     string `json:"leverage"`
	SubaccountId int    `json:"subaccountId,omitempty,omitzero"`
	Symbol       string `json:"symbol"`
}

// SetPriceAlertRequest defines model for SetPriceAlertRequest.
type SetPriceAlertRequest struct {
	AlertPrice     string         `json:"alertPrice"`
	AlertPriceType AlertPriceType `json:"alertPriceType"`
	AlertType      AlertType      `json:"alertType"`
}

// SizeTimeSeries defines model for SizeTimeSeries.
type SizeTimeSeries struct {
	Size string `json:"size"`

	// Time Time in microseconds since unix epoch
	Time int `json:"time"`
}

// SnapshotInterval Interval in seconds for getting snapshot data, set to regularly get refreshed snapshot values
type SnapshotInterval = int

// SubaccountSettingsRequest defines model for SubaccountSettingsRequest.
type SubaccountSettingsRequest struct {
	FuturesEnabled    bool         `json:"futuresEnabled"`
	IsLsp             bool         `json:"isLsp"`
	LspSettingUpdates []LspSetting `json:"lspSettingUpdates"`

	// PayFeesInArkm if true and ARKM balance is sufficient fees are paid in ARKM with a discount. This is only available for USDT pairs
	PayFeesInArkm bool `json:"payFeesInArkm"`
	SubaccountId  int  `json:"subaccountId"`
}

// SubaccountWithSettings defines model for SubaccountWithSettings.
type SubaccountWithSettings struct {
	// CreatedAt Time in microseconds since unix epoch
	CreatedAt int `json:"createdAt"`

	// FuturesEnabled if true futures trading is enabled for the subaccount
	FuturesEnabled bool `json:"futuresEnabled"`
	Id             int  `json:"id"`

	// IsLsp if true the subaccount is a liquidity provider
	IsLsp       bool         `json:"isLsp"`
	LspSettings []LspSetting `json:"lspSettings"`
	Name        string       `json:"name"`

	// PayFeesInArkm if true and ARKM balance is sufficient fees are paid in ARKM with a discount. This is only available for USDT pairs
	PayFeesInArkm bool `json:"payFeesInArkm"`
	Pinned        bool `json:"pinned"`
}

// SubscriptionParams defines model for SubscriptionParams.
type SubscriptionParams interface {
	isSubscriptionParams()
}

// Ticker defines model for Ticker.
type Ticker struct {
	BaseSymbol      string `json:"baseSymbol"`
	FundingRate     string `json:"fundingRate"`
	High24h         string `json:"high24h"`
	IndexCurrency   string `json:"indexCurrency"`
	IndexPrice      string `json:"indexPrice"`
	Low24h          string `json:"low24h"`
	MarkPrice       string `json:"markPrice"`
	NextFundingRate string `json:"nextFundingRate"`

	// NextFundingTime Time in microseconds since unix epoch
	NextFundingTime int      `json:"nextFundingTime"`
	OpenInterest    string   `json:"openInterest"`
	OpenInterestUSD string   `json:"openInterestUSD"`
	Price           string   `json:"price"`
	Price24hAgo     string   `json:"price24hAgo"`
	ProductType     PairType `json:"productType"`
	QuoteSymbol     string   `json:"quoteSymbol"`
	QuoteVolume24h  string   `json:"quoteVolume24h"`
	Symbol          string   `json:"symbol"`
	UsdVolume24h    string   `json:"usdVolume24h"`
	Volume24h       string   `json:"volume24h"`
}

// TickerSubscriptionParams defines model for TickerSubscriptionParams.
type TickerSubscriptionParams struct {
	Snapshot bool   `json:"snapshot,omitempty,omitzero"`
	Symbol   string `json:"symbol"`
}

// Trade defines model for Trade.
type Trade struct {
	Price      string    `json:"price"`
	RevisionId int       `json:"revisionId"`
	Size       string    `json:"size"`
	Symbol     string    `json:"symbol"`
	TakerSide  OrderSide `json:"takerSide"`

	// Time Time in microseconds since unix epoch
	Time int `json:"time"`
}

// TradeSubscriptionParams defines model for TradeSubscriptionParams.
type TradeSubscriptionParams struct {
	Snapshot bool   `json:"snapshot,omitempty,omitzero"`
	Symbol   string `json:"symbol"`
}

// TradingVolume defines model for TradingVolume.
type TradingVolume struct {
	PerpVolume string `json:"perpVolume"`
	SpotVolume string `json:"spotVolume"`
}

// TradingVolumeStats defines model for TradingVolumeStats.
type TradingVolumeStats struct {
	PerpMakerFees   string           `json:"perpMakerFees"`
	PerpMakerVolume string           `json:"perpMakerVolume"`
	PerpTakerFees   string           `json:"perpTakerFees"`
	PerpTakerVolume string           `json:"perpTakerVolume"`
	PerpVolume      []SizeTimeSeries `json:"perpVolume"`
	SpotMakerFees   string           `json:"spotMakerFees"`
	SpotMakerVolume string           `json:"spotMakerVolume"`
	SpotTakerFees   string           `json:"spotTakerFees"`
	SpotTakerVolume string           `json:"spotTakerVolume"`
	SpotVolume      []SizeTimeSeries `json:"spotVolume"`
	TotalVolume     []SizeTimeSeries `json:"totalVolume"`
}

// Transfer defines model for Transfer.
type Transfer struct {
	// Amount Amount of asset transferred, negative if sent, positive if received.
	Amount       string `json:"amount"`
	Counterparty int    `json:"counterparty"`
	Id           int    `json:"id"`
	SubaccountId int    `json:"subaccountId"`
	Symbol       string `json:"symbol"`

	// Time Time in microseconds since unix epoch
	Time int `json:"time"`
}

// TriggerOrder defines model for TriggerOrder.
type TriggerOrder struct {
	ClientOrderId string        `json:"clientOrderId"`
	PostOnly      bool          `json:"postOnly"`
	Price         string        `json:"price"`
	ReduceOnly    bool          `json:"reduceOnly"`
	Side          OrderSide     `json:"side"`
	Size          string        `json:"size"`
	Status        TriggerStatus `json:"status"`
	SubaccountId  int           `json:"subaccountId"`
	Symbol        string        `json:"symbol"`

	// Time Time in microseconds since unix epoch
	Time             int              `json:"time"`
	TriggerOrderId   int              `json:"triggerOrderId"`
	TriggerPrice     string           `json:"triggerPrice"`
	TriggerPriceType TriggerPriceType `json:"triggerPriceType"`
	TriggerType      TriggerType      `json:"triggerType"`
	Type             OrderType        `json:"type"`
}

// TriggerOrderSubscriptionParams defines model for TriggerOrderSubscriptionParams.
type TriggerOrderSubscriptionParams struct {
	Snapshot     bool `json:"snapshot,omitempty,omitzero"`
	SubaccountId int  `json:"subaccountId,omitempty,omitzero"`
}

// TriggerPriceType defines model for TriggerPriceType.
type TriggerPriceType string

// TriggerStatus defines model for TriggerStatus.
type TriggerStatus string

// TriggerType defines model for TriggerType.
type TriggerType string

// UUID defines model for UUID.
type UUID = uuid.UUID

// UpdateReferralLinkSlugRequest defines model for UpdateReferralLinkSlugRequest.
type UpdateReferralLinkSlugRequest struct {
	Slug string `json:"slug"`
}

// UpdateSubaccountRequest defines model for UpdateSubaccountRequest.
type UpdateSubaccountRequest struct {
	Id     int    `json:"id"`
	Name   string `json:"name,omitzero"`
	Pinned bool   `json:"pinned,omitzero"`
}

// UpdateUserSettingsRequest defines model for UpdateUserSettingsRequest.
type UpdateUserSettingsRequest struct {
	AllowSequenceEmails     bool    `json:"allowSequenceEmails,omitzero"`
	AutogenDepositAddresses bool    `json:"autogenDepositAddresses,omitzero"`
	ConfirmBeforePlaceOrder bool    `json:"confirmBeforePlaceOrder,omitzero"`
	HideBalances            bool    `json:"hideBalances,omitzero"`
	Language                Locale  `json:"language,omitempty,omitzero"`
	MarginUsageThreshold    float32 `json:"marginUsageThreshold,omitzero"`
	NotifyAnnouncements     bool    `json:"notifyAnnouncements,omitzero"`
	NotifyCommissions       bool    `json:"notifyCommissions,omitzero"`
	NotifyDeposits          bool    `json:"notifyDeposits,omitzero"`
	NotifyMarginUsage       bool    `json:"notifyMarginUsage,omitzero"`
	NotifyOrderFills        bool    `json:"notifyOrderFills,omitzero"`
	NotifyRebates           bool    `json:"notifyRebates,omitzero"`
	NotifySendEmail         bool    `json:"notifySendEmail,omitzero"`
	NotifyWithdrawals       bool    `json:"notifyWithdrawals,omitzero"`
	TickerTapeScroll        bool    `json:"tickerTapeScroll,omitzero"`
	UpdatesFlash            bool    `json:"updatesFlash,omitzero"`
}

// UpdateWithdrawalAddressLabelRequest defines model for UpdateWithdrawalAddressLabelRequest.
type UpdateWithdrawalAddressLabelRequest struct {
	Label string `json:"label"`
}

// UserDisplay defines model for UserDisplay.
type UserDisplay struct {
	// AirdropKycAt Time in microseconds since unix epoch
	AirdropKycAt int `json:"airdropKycAt"`

	// BecameVipAt Time in microseconds since unix epoch
	BecameVipAt int    `json:"becameVipAt"`
	Country     string `json:"country,omitzero"`

	// CreatedAt Time in microseconds since unix epoch
	CreatedAt int    `json:"createdAt"`
	Dmm       bool   `json:"dmm"`
	Email     string `json:"email"`

	// FeatureFlags List of feature flags enabled for the user
	FeatureFlags []string `json:"featureFlags"`
	Id           int      `json:"id"`

	// KycVerifiedAt Time in microseconds since unix epoch
	KycVerifiedAt int                      `json:"kycVerifiedAt"`
	Pmm           bool                     `json:"pmm"`
	RequireMFA    bool                     `json:"requireMFA"`
	Settings      UserSettings             `json:"settings"`
	Subaccounts   []SubaccountWithSettings `json:"subaccounts"`
	Username      string                   `json:"username"`
	WithdrawOnly  bool                     `json:"withdrawOnly"`
}

// UserFees defines model for UserFees.
type UserFees struct {
	PerpMakerFee string `json:"perpMakerFee"`
	PerpTakerFee string `json:"perpTakerFee"`
	SpotMakerFee string `json:"spotMakerFee"`
	SpotTakerFee string `json:"spotTakerFee"`
}

// UserPoints defines model for UserPoints.
type UserPoints struct {
	Points int `json:"points"`
	Rank   int `json:"rank"`
}

// UserSettings defines model for UserSettings.
type UserSettings struct {
	AllowSequenceEmails     bool    `json:"allowSequenceEmails"`
	AutogenDepositAddresses bool    `json:"autogenDepositAddresses"`
	ConfirmBeforePlaceOrder bool    `json:"confirmBeforePlaceOrder"`
	HideBalances            bool    `json:"hideBalances"`
	Language                Locale  `json:"language,omitempty,omitzero"`
	MarginUsageThreshold    float32 `json:"marginUsageThreshold"`
	NotifyAnnouncements     bool    `json:"notifyAnnouncements"`
	NotifyCommissions       bool    `json:"notifyCommissions"`
	NotifyDeposits          bool    `json:"notifyDeposits"`
	NotifyMarginUsage       bool    `json:"notifyMarginUsage"`
	NotifyOrderFills        bool    `json:"notifyOrderFills"`
	NotifyRebates           bool    `json:"notifyRebates"`
	NotifySendEmail         bool    `json:"notifySendEmail"`
	NotifyWithdrawals       bool    `json:"notifyWithdrawals"`
	TickerTapeScroll        bool    `json:"tickerTapeScroll"`
	UpdatesFlash            bool    `json:"updatesFlash"`
}

// UserTrade defines model for UserTrade.
type UserTrade struct {
	ArkmFee       string    `json:"arkmFee"`
	ClientOrderId string    `json:"clientOrderId"`
	OrderId       int       `json:"orderId"`
	Price         string    `json:"price"`
	QuoteFee      string    `json:"quoteFee"`
	RevisionId    int       `json:"revisionId"`
	Size          string    `json:"size"`
	Symbol        string    `json:"symbol"`
	TakerSide     OrderSide `json:"takerSide"`

	// Time Time in microseconds since unix epoch
	Time     int       `json:"time"`
	UserSide OrderSide `json:"userSide"`
}

// UserTradesWithTotalsResponse defines model for UserTradesWithTotalsResponse.
type UserTradesWithTotalsResponse struct {
	Total  int         `json:"total"`
	Trades []UserTrade `json:"trades"`
}

// VoucherClaimRequest defines model for VoucherClaimRequest.
type VoucherClaimRequest struct {
	VoucherId int `json:"voucherId"`
}

// VoucherConditionType defines model for VoucherConditionType.
type VoucherConditionType string

// VoucherStatus defines model for VoucherStatus.
type VoucherStatus string

// WebsocketBalancesSnapshot defines model for WebsocketBalancesSnapshot.
type WebsocketBalancesSnapshot struct {
	Channel        WebsocketChannel  `json:"channel"`
	ConfirmationId string            `json:"confirmationId,omitempty,omitzero"`
	Data           []Balance         `json:"data"`
	Type           WebsocketDataType `json:"type"`
}

// WebsocketBalancesSubscriptionArgs defines model for WebsocketBalancesSubscriptionArgs.
type WebsocketBalancesSubscriptionArgs struct {
	Channel WebsocketChannel          `json:"channel"`
	Params  BalanceSubscriptionParams `json:"params"`
}

// WebsocketBalancesUpdate defines model for WebsocketBalancesUpdate.
type WebsocketBalancesUpdate struct {
	Channel        WebsocketChannel  `json:"channel"`
	ConfirmationId string            `json:"confirmationId,omitempty,omitzero"`
	Data           Balance           `json:"data"`
	Type           WebsocketDataType `json:"type"`
}

// WebsocketCandlesSubscriptionArgs defines model for WebsocketCandlesSubscriptionArgs.
type WebsocketCandlesSubscriptionArgs struct {
	Channel WebsocketChannel         `json:"channel"`
	Params  CandleSubscriptionParams `json:"params"`
}

// WebsocketCandlesUpdate defines model for WebsocketCandlesUpdate.
type WebsocketCandlesUpdate struct {
	Channel        WebsocketChannel  `json:"channel"`
	ConfirmationId string            `json:"confirmationId,omitempty,omitzero"`
	Data           Candle            `json:"data"`
	Type           WebsocketDataType `json:"type"`
}

// WebsocketChannel defines model for WebsocketChannel.
type WebsocketChannel string

// WebsocketConfirmation defines model for WebsocketConfirmation.
type WebsocketConfirmation struct {
	Channel        WebsocketChannel `json:"channel"`
	ConfirmationId string           `json:"confirmationId"`
}

// WebsocketDataType defines model for WebsocketDataType.
type WebsocketDataType string

// WebsocketErrorResponse defines model for WebsocketErrorResponse.
type WebsocketErrorResponse struct {
	Channel        WebsocketErrorResponseChannel `json:"channel"`
	Code           interface{}                   `json:"code"`
	ConfirmationId string                        `json:"confirmationId,omitempty,omitzero"`

	// Id The unique identifier for the error
	Id      ErrorId `json:"id"`
	Message string  `json:"message"`

	// Name The name of the error
	Name ErrorName `json:"name"`
}

// WebsocketErrorResponseChannel defines model for WebsocketErrorResponse.Channel.
type WebsocketErrorResponseChannel string

// WebsocketExecuteRequest defines model for WebsocketExecuteRequest.
type WebsocketExecuteRequest struct {
	Args           WebsocketExecuteRequestArgs `json:"args"`
	ConfirmationId string                      `json:"confirmationId,omitempty,omitzero"`
	Method         WebsocketMethod             `json:"method"`
}

// WebsocketExecuteRequestArgs defines model for WebsocketExecuteRequestArgs.
type WebsocketExecuteRequestArgs interface {
	isWebsocketExecuteRequestArgs()
}

// WebsocketL1UpdatesSnapshot defines model for WebsocketL1UpdatesSnapshot.
type WebsocketL1UpdatesSnapshot struct {
	Channel        WebsocketChannel  `json:"channel"`
	ConfirmationId string            `json:"confirmationId,omitempty,omitzero"`
	Data           L1OrderBook       `json:"data"`
	Type           WebsocketDataType `json:"type"`
}

// WebsocketL1UpdatesSubscriptionArgs defines model for WebsocketL1UpdatesSubscriptionArgs.
type WebsocketL1UpdatesSubscriptionArgs struct {
	Channel WebsocketChannel              `json:"channel"`
	Params  L1OrderBookSubscriptionParams `json:"params"`
}

// WebsocketL1UpdatesUpdate defines model for WebsocketL1UpdatesUpdate.
type WebsocketL1UpdatesUpdate struct {
	Channel        WebsocketChannel  `json:"channel"`
	ConfirmationId string            `json:"confirmationId,omitempty,omitzero"`
	Data           L1OrderBook       `json:"data"`
	Type           WebsocketDataType `json:"type"`
}

// WebsocketL2UpdatesSnapshot defines model for WebsocketL2UpdatesSnapshot.
type WebsocketL2UpdatesSnapshot struct {
	Channel        WebsocketChannel  `json:"channel"`
	ConfirmationId string            `json:"confirmationId,omitempty,omitzero"`
	Data           OrderBook         `json:"data"`
	Type           WebsocketDataType `json:"type"`
}

// WebsocketL2UpdatesSubscriptionArgs defines model for WebsocketL2UpdatesSubscriptionArgs.
type WebsocketL2UpdatesSubscriptionArgs struct {
	Channel WebsocketChannel              `json:"channel"`
	Params  L2OrderBookSubscriptionParams `json:"params"`
}

// WebsocketL2UpdatesUpdate defines model for WebsocketL2UpdatesUpdate.
type WebsocketL2UpdatesUpdate struct {
	Channel        WebsocketChannel  `json:"channel"`
	ConfirmationId string            `json:"confirmationId,omitempty,omitzero"`
	Data           L2Update          `json:"data"`
	Type           WebsocketDataType `json:"type"`
}

// WebsocketLspAssignmentsSubscriptionArgs defines model for WebsocketLspAssignmentsSubscriptionArgs.
type WebsocketLspAssignmentsSubscriptionArgs struct {
	Channel WebsocketChannel                `json:"channel"`
	Params  LspAssignmentSubscriptionParams `json:"params"`
}

// WebsocketLspAssignmentsUpdate defines model for WebsocketLspAssignmentsUpdate.
type WebsocketLspAssignmentsUpdate struct {
	Channel        WebsocketChannel  `json:"channel"`
	ConfirmationId string            `json:"confirmationId,omitempty,omitzero"`
	Data           LspAssignment     `json:"data"`
	Type           WebsocketDataType `json:"type"`
}

// WebsocketMarginSnapshot defines model for WebsocketMarginSnapshot.
type WebsocketMarginSnapshot struct {
	Channel        WebsocketChannel  `json:"channel"`
	ConfirmationId string            `json:"confirmationId,omitempty,omitzero"`
	Data           Margin            `json:"data"`
	Type           WebsocketDataType `json:"type"`
}

// WebsocketMarginSubscriptionArgs defines model for WebsocketMarginSubscriptionArgs.
type WebsocketMarginSubscriptionArgs struct {
	Channel WebsocketChannel         `json:"channel"`
	Params  MarginSubscriptionParams `json:"params"`
}

// WebsocketMarginUpdate defines model for WebsocketMarginUpdate.
type WebsocketMarginUpdate struct {
	Channel        WebsocketChannel  `json:"channel"`
	ConfirmationId string            `json:"confirmationId,omitempty,omitzero"`
	Data           Margin            `json:"data"`
	Type           WebsocketDataType `json:"type"`
}

// WebsocketMethod defines model for WebsocketMethod.
type WebsocketMethod string

// WebsocketOrderStatusesSnapshot defines model for WebsocketOrderStatusesSnapshot.
type WebsocketOrderStatusesSnapshot struct {
	Channel        WebsocketChannel  `json:"channel"`
	ConfirmationId string            `json:"confirmationId,omitempty,omitzero"`
	Data           []Order           `json:"data"`
	Type           WebsocketDataType `json:"type"`
}

// WebsocketOrderStatusesSubscriptionArgs defines model for WebsocketOrderStatusesSubscriptionArgs.
type WebsocketOrderStatusesSubscriptionArgs struct {
	Channel WebsocketChannel              `json:"channel"`
	Params  OrderStatusSubscriptionParams `json:"params"`
}

// WebsocketOrderStatusesUpdate defines model for WebsocketOrderStatusesUpdate.
type WebsocketOrderStatusesUpdate struct {
	Channel        WebsocketChannel  `json:"channel"`
	ConfirmationId string            `json:"confirmationId,omitempty,omitzero"`
	Data           Order             `json:"data"`
	Type           WebsocketDataType `json:"type"`
}

// WebsocketOrdersCancelAllExecutionArgs defines model for WebsocketOrdersCancelAllExecutionArgs.
type WebsocketOrdersCancelAllExecutionArgs struct {
	Channel WebsocketChannel `json:"channel"`
	Params  CancelAllRequest `json:"params"`
}

// WebsocketOrdersCancelAllResponse defines model for WebsocketOrdersCancelAllResponse.
type WebsocketOrdersCancelAllResponse struct {
	Channel        WebsocketChannel  `json:"channel"`
	ConfirmationId string            `json:"confirmationId,omitempty,omitzero"`
	Data           CancelAllResponse `json:"data"`
}

// WebsocketOrdersCancelExecutionArgs defines model for WebsocketOrdersCancelExecutionArgs.
type WebsocketOrdersCancelExecutionArgs struct {
	Channel WebsocketChannel   `json:"channel"`
	Params  CancelOrderRequest `json:"params"`
}

// WebsocketOrdersCancelResponse defines model for WebsocketOrdersCancelResponse.
type WebsocketOrdersCancelResponse struct {
	Channel        WebsocketChannel    `json:"channel"`
	ConfirmationId string              `json:"confirmationId,omitempty,omitzero"`
	Data           CancelOrderResponse `json:"data"`
}

// WebsocketOrdersNewExecutionArgs defines model for WebsocketOrdersNewExecutionArgs.
type WebsocketOrdersNewExecutionArgs struct {
	Channel WebsocketChannel   `json:"channel"`
	Params  CreateOrderRequest `json:"params"`
}

// WebsocketOrdersNewResponse defines model for WebsocketOrdersNewResponse.
type WebsocketOrdersNewResponse struct {
	Channel        WebsocketChannel    `json:"channel"`
	ConfirmationId string              `json:"confirmationId,omitempty,omitzero"`
	Data           CreateOrderResponse `json:"data"`
}

// WebsocketPingRequest defines model for WebsocketPingRequest.
type WebsocketPingRequest struct {
	ConfirmationId string          `json:"confirmationId,omitempty,omitzero"`
	Method         WebsocketMethod `json:"method"`
}

// WebsocketPongResponse defines model for WebsocketPongResponse.
type WebsocketPongResponse struct {
	Channel WebsocketChannel `json:"channel"`
}

// WebsocketPositionsSnapshot defines model for WebsocketPositionsSnapshot.
type WebsocketPositionsSnapshot struct {
	Channel        WebsocketChannel  `json:"channel"`
	ConfirmationId string            `json:"confirmationId,omitempty,omitzero"`
	Data           []Position        `json:"data"`
	Type           WebsocketDataType `json:"type"`
}

// WebsocketPositionsSubscriptionArgs defines model for WebsocketPositionsSubscriptionArgs.
type WebsocketPositionsSubscriptionArgs struct {
	Channel WebsocketChannel           `json:"channel"`
	Params  PositionSubscriptionParams `json:"params"`
}

// WebsocketPositionsUpdate defines model for WebsocketPositionsUpdate.
type WebsocketPositionsUpdate struct {
	Channel        WebsocketChannel  `json:"channel"`
	ConfirmationId string            `json:"confirmationId,omitempty,omitzero"`
	Data           Position          `json:"data"`
	Type           WebsocketDataType `json:"type"`
}

// WebsocketRequest defines model for WebsocketRequest.
type WebsocketRequest interface {
	isWebsocketRequest()
}

// WebsocketResponse defines model for WebsocketResponse.
type WebsocketResponse interface {
	isWebsocketResponse()
}

// WebsocketSubscribeRequest defines model for WebsocketSubscribeRequest.
type WebsocketSubscribeRequest struct {
	Args           WebsocketSubscribeRequestArgs `json:"args"`
	ConfirmationId string                        `json:"confirmationId,omitempty,omitzero"`
	Method         WebsocketMethod               `json:"method"`
}

// WebsocketSubscribeRequestArgs defines model for WebsocketSubscribeRequestArgs.
type WebsocketSubscribeRequestArgs interface {
	isWebsocketSubscribeRequestArgs()
}

// WebsocketTickerSnapshot defines model for WebsocketTickerSnapshot.
type WebsocketTickerSnapshot struct {
	Channel        WebsocketChannel  `json:"channel"`
	ConfirmationId string            `json:"confirmationId,omitempty,omitzero"`
	Data           Ticker            `json:"data"`
	Type           WebsocketDataType `json:"type"`
}

// WebsocketTickerSubscriptionArgs defines model for WebsocketTickerSubscriptionArgs.
type WebsocketTickerSubscriptionArgs struct {
	Channel WebsocketChannel         `json:"channel"`
	Params  TickerSubscriptionParams `json:"params"`
}

// WebsocketTickerUpdate defines model for WebsocketTickerUpdate.
type WebsocketTickerUpdate struct {
	Channel        WebsocketChannel  `json:"channel"`
	ConfirmationId string            `json:"confirmationId,omitempty,omitzero"`
	Data           Ticker            `json:"data"`
	Type           WebsocketDataType `json:"type"`
}

// WebsocketTradesSnapshot defines model for WebsocketTradesSnapshot.
type WebsocketTradesSnapshot struct {
	Channel        WebsocketChannel  `json:"channel"`
	ConfirmationId string            `json:"confirmationId,omitempty,omitzero"`
	Data           []Trade           `json:"data"`
	Type           WebsocketDataType `json:"type"`
}

// WebsocketTradesSubscriptionArgs defines model for WebsocketTradesSubscriptionArgs.
type WebsocketTradesSubscriptionArgs struct {
	Channel WebsocketChannel        `json:"channel"`
	Params  TradeSubscriptionParams `json:"params"`
}

// WebsocketTradesUpdate defines model for WebsocketTradesUpdate.
type WebsocketTradesUpdate struct {
	Channel        WebsocketChannel  `json:"channel"`
	ConfirmationId string            `json:"confirmationId,omitempty,omitzero"`
	Data           Trade             `json:"data"`
	Type           WebsocketDataType `json:"type"`
}

// WebsocketTriggerOrdersCancelAllExecutionArgs defines model for WebsocketTriggerOrdersCancelAllExecutionArgs.
type WebsocketTriggerOrdersCancelAllExecutionArgs struct {
	Channel WebsocketChannel              `json:"channel"`
	Params  CancelAllTriggerOrdersRequest `json:"params"`
}

// WebsocketTriggerOrdersCancelAllResponse defines model for WebsocketTriggerOrdersCancelAllResponse.
type WebsocketTriggerOrdersCancelAllResponse struct {
	Channel        WebsocketChannel               `json:"channel"`
	ConfirmationId string                         `json:"confirmationId,omitempty,omitzero"`
	Data           CancelAllTriggerOrdersResponse `json:"data"`
}

// WebsocketTriggerOrdersCancelExecutionArgs defines model for WebsocketTriggerOrdersCancelExecutionArgs.
type WebsocketTriggerOrdersCancelExecutionArgs struct {
	Channel WebsocketChannel          `json:"channel"`
	Params  CancelTriggerOrderRequest `json:"params"`
}

// WebsocketTriggerOrdersCancelResponse defines model for WebsocketTriggerOrdersCancelResponse.
type WebsocketTriggerOrdersCancelResponse struct {
	Channel        WebsocketChannel           `json:"channel"`
	ConfirmationId string                     `json:"confirmationId,omitempty,omitzero"`
	Data           CancelTriggerOrderResponse `json:"data"`
}

// WebsocketTriggerOrdersNewExecutionArgs defines model for WebsocketTriggerOrdersNewExecutionArgs.
type WebsocketTriggerOrdersNewExecutionArgs struct {
	Channel WebsocketChannel          `json:"channel"`
	Params  CreateTriggerOrderRequest `json:"params"`
}

// WebsocketTriggerOrdersNewResponse defines model for WebsocketTriggerOrdersNewResponse.
type WebsocketTriggerOrdersNewResponse struct {
	Channel        WebsocketChannel           `json:"channel"`
	ConfirmationId string                     `json:"confirmationId,omitempty,omitzero"`
	Data           CreateTriggerOrderResponse `json:"data"`
}

// WebsocketTriggerOrdersSnapshot defines model for WebsocketTriggerOrdersSnapshot.
type WebsocketTriggerOrdersSnapshot struct {
	Channel        WebsocketChannel  `json:"channel"`
	ConfirmationId string            `json:"confirmationId,omitempty,omitzero"`
	Data           []TriggerOrder    `json:"data"`
	Type           WebsocketDataType `json:"type"`
}

// WebsocketTriggerOrdersSubscriptionArgs defines model for WebsocketTriggerOrdersSubscriptionArgs.
type WebsocketTriggerOrdersSubscriptionArgs struct {
	Channel WebsocketChannel               `json:"channel"`
	Params  TriggerOrderSubscriptionParams `json:"params"`
}

// WebsocketTriggerOrdersUpdate defines model for WebsocketTriggerOrdersUpdate.
type WebsocketTriggerOrdersUpdate struct {
	Channel        WebsocketChannel  `json:"channel"`
	ConfirmationId string            `json:"confirmationId,omitempty,omitzero"`
	Data           TriggerOrder      `json:"data"`
	Type           WebsocketDataType `json:"type"`
}

// WebsocketUnsubscribeRequest defines model for WebsocketUnsubscribeRequest.
type WebsocketUnsubscribeRequest struct {
	Args           WebsocketSubscribeRequestArgs `json:"args"`
	ConfirmationId string                        `json:"confirmationId,omitempty,omitzero"`
	Method         WebsocketMethod               `json:"method"`
}

// Withdrawal defines model for Withdrawal.
type Withdrawal struct {
	Amount       string `json:"amount"`
	Chain        string `json:"chain"`
	Confirmed    bool   `json:"confirmed"`
	Id           int    `json:"id"`
	Price        string `json:"price"`
	SubaccountId int    `json:"subaccountId"`
	Symbol       string `json:"symbol"`

	// Time Time in microseconds since unix epoch
	Time              int    `json:"time"`
	TransactionHash   string `json:"transactionHash,omitempty,omitzero"`
	WithdrawalAddress string `json:"withdrawalAddress"`
}

// WithdrawalAddress defines model for WithdrawalAddress.
type WithdrawalAddress struct {
	Address   string `json:"address"`
	Chain     string `json:"chain"`
	Confirmed bool   `json:"confirmed"`

	// CreatedAt Time in microseconds since unix epoch
	CreatedAt      int    `json:"createdAt"`
	HasBeneficiary bool   `json:"hasBeneficiary"`
	Id             int    `json:"id"`
	Label          string `json:"label"`

	// UpdatedAt Time in microseconds since unix epoch
	UpdatedAt int `json:"updatedAt"`
}

// WithdrawalTravelRuleBeneficiary defines model for WithdrawalTravelRuleBeneficiary.
type WithdrawalTravelRuleBeneficiary struct {
	FirstName string `json:"firstName,omitzero"`
	IsSelf    bool   `json:"isSelf"`
	IsVasp    bool   `json:"isVasp,omitzero"`
	LastName  string `json:"lastName,omitzero"`
}

// GetAccountAirdropsParams defines parameters for GetAccountAirdrops.
type GetAccountAirdropsParams struct {
	SubaccountId int `form:"subaccountId,omitempty" json:"subaccountId,omitempty,omitzero"`
	Before       int `form:"before,omitempty" json:"before,omitempty,omitzero"`
	Limit        int `form:"limit,omitempty" json:"limit,omitempty,omitzero"`
}

// GetAccountBalanceUpdatesParams defines parameters for GetAccountBalanceUpdates.
type GetAccountBalanceUpdatesParams struct {
	SubaccountId int                  `form:"subaccountId,omitempty" json:"subaccountId,omitempty,omitzero"`
	Before       int                  `form:"before,omitempty" json:"before,omitempty,omitzero"`
	Reason       PositionUpdateReason `form:"reason,omitempty" json:"reason,omitempty,omitzero"`
	Limit        int                  `form:"limit,omitempty" json:"limit,omitempty,omitzero"`
}

// GetBalancesParams defines parameters for GetBalances.
type GetBalancesParams struct {
	SubaccountId int `form:"subaccountId,omitempty" json:"subaccountId,omitempty,omitzero"`
}

// GetPortfolioBalanceHistoryParams defines parameters for GetPortfolioBalanceHistory.
type GetPortfolioBalanceHistoryParams struct {
	SubaccountId int `form:"subaccountId,omitempty" json:"subaccountId,omitempty,omitzero"`

	// Start Time in microseconds since unix epoch
	Start int `form:"start,omitempty" json:"start,omitempty,omitzero"`

	// End Time in microseconds since unix epoch
	End int `form:"end,omitempty" json:"end,omitempty,omitzero"`
}

// GetAccountCommissionsParams defines parameters for GetAccountCommissions.
type GetAccountCommissionsParams struct {
	SubaccountId int `form:"subaccountId,omitempty" json:"subaccountId,omitempty,omitzero"`
	Before       int `form:"before,omitempty" json:"before,omitempty,omitzero"`
	Limit        int `form:"limit,omitempty" json:"limit,omitempty,omitzero"`
}

// GetDepositAddressesParams defines parameters for GetDepositAddresses.
type GetDepositAddressesParams struct {
	SubaccountId int    `form:"subaccountId,omitempty" json:"subaccountId,omitempty,omitzero"`
	Chain        string `form:"chain" json:"chain"`
}

// GetAccountDepositsParams defines parameters for GetAccountDeposits.
type GetAccountDepositsParams struct {
	SubaccountId int `form:"subaccountId,omitempty" json:"subaccountId,omitempty,omitzero"`
	Before       int `form:"before,omitempty" json:"before,omitempty,omitzero"`
	Limit        int `form:"limit,omitempty" json:"limit,omitempty,omitzero"`
}

// GetFundingRatePaymentsParams defines parameters for GetFundingRatePayments.
type GetFundingRatePaymentsParams struct {
	SubaccountId int `form:"subaccountId,omitempty" json:"subaccountId,omitempty,omitzero"`
	Before       int `form:"before,omitempty" json:"before,omitempty,omitzero"`
	Limit        int `form:"limit,omitempty" json:"limit,omitempty,omitzero"`
}

// GetPositionLeverageParams defines parameters for GetPositionLeverage.
type GetPositionLeverageParams struct {
	SubaccountId int `form:"subaccountId,omitempty" json:"subaccountId,omitempty,omitzero"`
}

// GetLiquidationPriceParams defines parameters for GetLiquidationPrice.
type GetLiquidationPriceParams struct {
	SubaccountId int    `form:"subaccountId,omitempty" json:"subaccountId,omitempty,omitzero"`
	Symbol       string `form:"symbol,omitempty" json:"symbol,omitempty,omitzero"`
}

// GetAccountLspAssignmentsParams defines parameters for GetAccountLspAssignments.
type GetAccountLspAssignmentsParams struct {
	SubaccountId int `form:"subaccountId,omitempty" json:"subaccountId,omitempty,omitzero"`
	Before       int `form:"before,omitempty" json:"before,omitempty,omitzero"`
	Limit        int `form:"limit,omitempty" json:"limit,omitempty,omitzero"`
}

// GetMarginParams defines parameters for GetMargin.
type GetMarginParams struct {
	SubaccountId int `form:"subaccountId,omitempty" json:"subaccountId,omitempty,omitzero"`
}

// GetNotificationsParams defines parameters for GetNotifications.
type GetNotificationsParams struct {
	Type   NotificationType `form:"type,omitempty" json:"type,omitempty,omitzero"`
	Limit  int              `form:"limit,omitempty" json:"limit,omitempty,omitzero"`
	Offset int              `form:"offset,omitempty" json:"offset,omitempty,omitzero"`
}

// GetAccountPositionUpdatesParams defines parameters for GetAccountPositionUpdates.
type GetAccountPositionUpdatesParams struct {
	SubaccountId int                  `form:"subaccountId,omitempty" json:"subaccountId,omitempty,omitzero"`
	Before       int                  `form:"before,omitempty" json:"before,omitempty,omitzero"`
	Reason       PositionUpdateReason `form:"reason,omitempty" json:"reason,omitempty,omitzero"`
	Limit        int                  `form:"limit,omitempty" json:"limit,omitempty,omitzero"`
}

// GetPositionsParams defines parameters for GetPositions.
type GetPositionsParams struct {
	SubaccountId int `form:"subaccountId,omitempty" json:"subaccountId,omitempty,omitzero"`
}

// GetAccountRealizedPnlParams defines parameters for GetAccountRealizedPnl.
type GetAccountRealizedPnlParams struct {
	SubaccountId int `form:"subaccountId,omitempty" json:"subaccountId,omitempty,omitzero"`
	Before       int `form:"before,omitempty" json:"before,omitempty,omitzero"`
	Limit        int `form:"limit,omitempty" json:"limit,omitempty,omitzero"`
}

// GetAccountRebatesParams defines parameters for GetAccountRebates.
type GetAccountRebatesParams struct {
	SubaccountId int `form:"subaccountId,omitempty" json:"subaccountId,omitempty,omitzero"`
	Before       int `form:"before,omitempty" json:"before,omitempty,omitzero"`
	Limit        int `form:"limit,omitempty" json:"limit,omitempty,omitzero"`
}

// DeletePriceAlertParams defines parameters for DeletePriceAlert.
type DeletePriceAlertParams struct {
	SubaccountId int    `form:"subaccountId,omitempty" json:"subaccountId,omitempty,omitzero"`
	Symbol       string `form:"symbol,omitempty" json:"symbol,omitempty,omitzero"`
}

// GetPriceAlertParams defines parameters for GetPriceAlert.
type GetPriceAlertParams struct {
	SubaccountId int    `form:"subaccountId,omitempty" json:"subaccountId,omitempty,omitzero"`
	Symbol       string `form:"symbol,omitempty" json:"symbol,omitempty,omitzero"`
}

// SetPriceAlertParams defines parameters for SetPriceAlert.
type SetPriceAlertParams struct {
	SubaccountId int    `form:"subaccountId,omitempty" json:"subaccountId,omitempty,omitzero"`
	Symbol       string `form:"symbol,omitempty" json:"symbol,omitempty,omitzero"`
}

// GetAccountTransfersParams defines parameters for GetAccountTransfers.
type GetAccountTransfersParams struct {
	SubaccountId int `form:"subaccountId,omitempty" json:"subaccountId,omitempty,omitzero"`
	Before       int `form:"before,omitempty" json:"before,omitempty,omitzero"`
	Limit        int `form:"limit,omitempty" json:"limit,omitempty,omitzero"`
}

// HandleReminderEmailUnsubscribeParams defines parameters for HandleReminderEmailUnsubscribe.
type HandleReminderEmailUnsubscribeParams struct {
	LinkId string `form:"linkId" json:"linkId"`
}

// GetAccountWithdrawalsParams defines parameters for GetAccountWithdrawals.
type GetAccountWithdrawalsParams struct {
	SubaccountId int `form:"subaccountId,omitempty" json:"subaccountId,omitempty,omitzero"`
	Before       int `form:"before,omitempty" json:"before,omitempty,omitzero"`
	Limit        int `form:"limit,omitempty" json:"limit,omitempty,omitzero"`
}

// AuthenticateParams defines parameters for Authenticate.
type AuthenticateParams struct {
	TradeInToken string `form:"tradeInToken,omitempty" json:"tradeInToken,omitempty,omitzero"`
	RedirectPath string `form:"redirectPath,omitempty" json:"redirectPath,omitempty,omitzero"`
}

// CompetitionOptInStatusParams defines parameters for CompetitionOptInStatus.
type CompetitionOptInStatusParams struct {
	CompetitionId int `form:"competition_id,omitempty" json:"competition_id,omitempty,omitzero"`
}

// DexPriceParams defines parameters for DexPrice.
type DexPriceParams struct {
	ChainId     int    `form:"chainId,omitempty" json:"chainId,omitempty,omitzero"`
	SellToken   string `form:"sellToken,omitempty" json:"sellToken,omitempty,omitzero"`
	BuyToken    string `form:"buyToken,omitempty" json:"buyToken,omitempty,omitzero"`
	SellAmount  string `form:"sellAmount,omitempty" json:"sellAmount,omitempty,omitzero"`
	Taker       string `form:"taker,omitempty" json:"taker,omitempty,omitzero"`
	SlippageBps int    `form:"slippageBps,omitempty" json:"slippageBps,omitempty,omitzero"`
}

// DexQuoteParams defines parameters for DexQuote.
type DexQuoteParams struct {
	ChainId     int    `form:"chainId,omitempty" json:"chainId,omitempty,omitzero"`
	SellToken   string `form:"sellToken,omitempty" json:"sellToken,omitempty,omitzero"`
	BuyToken    string `form:"buyToken,omitempty" json:"buyToken,omitempty,omitzero"`
	SellAmount  string `form:"sellAmount,omitempty" json:"sellAmount,omitempty,omitzero"`
	Taker       string `form:"taker,omitempty" json:"taker,omitempty,omitzero"`
	SlippageBps int    `form:"slippageBps,omitempty" json:"slippageBps,omitempty,omitzero"`
}

// DexTradeHistoryParams defines parameters for DexTradeHistory.
type DexTradeHistoryParams struct {
	Address string `form:"address,omitempty" json:"address,omitempty,omitzero"`
	ChainId int    `form:"chainId,omitempty" json:"chainId,omitempty,omitzero"`
	Limit   int    `form:"limit,omitempty" json:"limit,omitempty,omitzero"`
}

// GetOrdersParams defines parameters for GetOrders.
type GetOrdersParams struct {
	SubaccountId int `form:"subaccountId,omitempty" json:"subaccountId,omitempty,omitzero"`
}

// GetOpenOrderByClientOrderIdParams defines parameters for GetOpenOrderByClientOrderId.
type GetOpenOrderByClientOrderIdParams struct {
	SubaccountId  int    `form:"subaccountId,omitempty" json:"subaccountId,omitempty,omitzero"`
	ClientOrderId string `form:"clientOrderId,omitempty" json:"clientOrderId,omitempty,omitzero"`
}

// GetOrderHistoryParams defines parameters for GetOrderHistory.
type GetOrderHistoryParams struct {
	Symbol       string `form:"symbol,omitempty" json:"symbol,omitempty,omitzero"`
	SubaccountId int    `form:"subaccountId,omitempty" json:"subaccountId,omitempty,omitzero"`
	Limit        int    `form:"limit,omitempty" json:"limit,omitempty,omitzero"`
	Offset       int    `form:"offset,omitempty" json:"offset,omitempty,omitzero"`
}

// GetAllOrdersByClientOrderIdParams defines parameters for GetAllOrdersByClientOrderId.
type GetAllOrdersByClientOrderIdParams struct {
	SubaccountId  int    `form:"subaccountId,omitempty" json:"subaccountId,omitempty,omitzero"`
	ClientOrderId string `form:"clientOrderId,omitempty" json:"clientOrderId,omitempty,omitzero"`
}

// GetOrderHistoryWithTotalParams defines parameters for GetOrderHistoryWithTotal.
type GetOrderHistoryWithTotalParams struct {
	Symbol       string `form:"symbol,omitempty" json:"symbol,omitempty,omitzero"`
	SubaccountId int    `form:"subaccountId,omitempty" json:"subaccountId,omitempty,omitzero"`
	Limit        int    `form:"limit,omitempty" json:"limit,omitempty,omitzero"`
	Offset       int    `form:"offset,omitempty" json:"offset,omitempty,omitzero"`
}

// GetOrderByIdParams defines parameters for GetOrderById.
type GetOrderByIdParams struct {
	SubaccountId int `form:"subaccountId,omitempty" json:"subaccountId,omitempty,omitzero"`
}

// GetAnnouncementsParams defines parameters for GetAnnouncements.
type GetAnnouncementsParams struct {
	Locale Locale `form:"locale" json:"locale"`
}

// GetBookParams defines parameters for GetBook.
type GetBookParams struct {
	Symbol string `form:"symbol" json:"symbol"`
	Limit  int    `form:"limit,omitempty" json:"limit,omitempty,omitzero"`
}

// GetCandlesParams defines parameters for GetCandles.
type GetCandlesParams struct {
	Symbol   string         `form:"symbol" json:"symbol"`
	Duration CandleDuration `form:"duration" json:"duration"`

	// Start Time in microseconds since unix epoch
	Start int `form:"start" json:"start"`

	// End Time in microseconds since unix epoch
	End int `form:"end" json:"end"`
}

// GetIndexPriceParams defines parameters for GetIndexPrice.
type GetIndexPriceParams struct {
	Symbol string `form:"symbol" json:"symbol"`
}

// GetL1BookParams defines parameters for GetL1Book.
type GetL1BookParams struct {
	Symbol string `form:"symbol" json:"symbol"`
	Limit  int    `form:"limit,omitempty" json:"limit,omitempty,omitzero"`
}

// GetPairParams defines parameters for GetPair.
type GetPairParams struct {
	Symbol string `form:"symbol" json:"symbol"`
}

// GetTickerParams defines parameters for GetTicker.
type GetTickerParams struct {
	Symbol string `form:"symbol" json:"symbol"`
}

// GetPublicTradesParams defines parameters for GetPublicTrades.
type GetPublicTradesParams struct {
	Symbol string `form:"symbol" json:"symbol"`
	Before int    `form:"before,omitempty" json:"before,omitempty,omitzero"`
	Limit  int    `form:"limit,omitempty" json:"limit,omitempty,omitzero"`
}

// VouchersParams defines parameters for Vouchers.
type VouchersParams struct {
	Claimed bool   `form:"claimed,omitempty" json:"claimed,omitempty,omitzero"`
	Locale  string `form:"locale,omitempty" json:"locale,omitempty,omitzero"`
}

// GetUserTradesParams defines parameters for GetUserTrades.
type GetUserTradesParams struct {
	Symbol       string `form:"symbol,omitempty" json:"symbol,omitempty,omitzero"`
	SubaccountId int    `form:"subaccountId,omitempty" json:"subaccountId,omitempty,omitzero"`
	Before       int    `form:"before,omitempty" json:"before,omitempty,omitzero"`
	Limit        int    `form:"limit,omitempty" json:"limit,omitempty,omitzero"`
}

// GetUserTradesWithTotalsParams defines parameters for GetUserTradesWithTotals.
type GetUserTradesWithTotalsParams struct {
	Symbol       string `form:"symbol,omitempty" json:"symbol,omitempty,omitzero"`
	SubaccountId int    `form:"subaccountId,omitempty" json:"subaccountId,omitempty,omitzero"`
	Limit        int    `form:"limit,omitempty" json:"limit,omitempty,omitzero"`
	Offset       int    `form:"offset,omitempty" json:"offset,omitempty,omitzero"`
}

// GetUserTradesByTimeParams defines parameters for GetUserTradesByTime.
type GetUserTradesByTimeParams struct {
	SubaccountId int `form:"subaccountId,omitempty" json:"subaccountId,omitempty,omitzero"`

	// From time from, inclusive
	From int `form:"from,omitempty" json:"from,omitempty,omitzero"`

	// To time to, inclusive
	To    int `form:"to,omitempty" json:"to,omitempty,omitzero"`
	Limit int `form:"limit,omitempty" json:"limit,omitempty,omitzero"`
}

// GetTriggerOrdersParams defines parameters for GetTriggerOrders.
type GetTriggerOrdersParams struct {
	SubaccountId int `form:"subaccountId,omitempty" json:"subaccountId,omitempty,omitzero"`
}

// NewDepositAddressJSONRequestBody defines body for NewDepositAddress for application/json ContentType.
type NewDepositAddressJSONRequestBody = NewDepositAddressRequest

// SetPositionLeverageJSONRequestBody defines body for SetPositionLeverage for application/json ContentType.
type SetPositionLeverageJSONRequestBody = SetPositionLeverageRequest

// MarkReadNotificationsJSONRequestBody defines body for MarkReadNotifications for application/json ContentType.
type MarkReadNotificationsJSONRequestBody = MarkReadNotificationsRequest

// UpdateReferralLinkSlugJSONRequestBody defines body for UpdateReferralLinkSlug for application/json ContentType.
type UpdateReferralLinkSlugJSONRequestBody = UpdateReferralLinkSlugRequest

// HandleDeleteSessionJSONRequestBody defines body for HandleDeleteSession for application/json ContentType.
type HandleDeleteSessionJSONRequestBody = DeleteSessionRequest

// SetPriceAlertJSONRequestBody defines body for SetPriceAlert for application/json ContentType.
type SetPriceAlertJSONRequestBody = SetPriceAlertRequest

// UpdateUserSettingsJSONRequestBody defines body for UpdateUserSettings for application/json ContentType.
type UpdateUserSettingsJSONRequestBody = UpdateUserSettingsRequest

// AddToWatchlistJSONRequestBody defines body for AddToWatchlist for application/json ContentType.
type AddToWatchlistJSONRequestBody = AddToWatchlistRequest

// RemoveFromWatchlistJSONRequestBody defines body for RemoveFromWatchlist for application/json ContentType.
type RemoveFromWatchlistJSONRequestBody = RemoveFromWatchlistRequest

// AccountWithdrawJSONRequestBody defines body for AccountWithdraw for application/json ContentType.
type AccountWithdrawJSONRequestBody = AccountWithdrawRequest

// AccountWithdrawUsingMFAJSONRequestBody defines body for AccountWithdrawUsingMFA for application/json ContentType.
type AccountWithdrawUsingMFAJSONRequestBody = AccountWithdrawUsingMFARequest

// CreateWithdrawalAddressJSONRequestBody defines body for CreateWithdrawalAddress for application/json ContentType.
type CreateWithdrawalAddressJSONRequestBody = CreateWithdrawalAddressRequest

// ConfirmWithdrawalAddressJSONRequestBody defines body for ConfirmWithdrawalAddress for application/json ContentType.
type ConfirmWithdrawalAddressJSONRequestBody = ConfirmWithdrawalAddressRequest

// UpdateWithdrawalAddressLabelJSONRequestBody defines body for UpdateWithdrawalAddressLabel for application/json ContentType.
type UpdateWithdrawalAddressLabelJSONRequestBody = UpdateWithdrawalAddressLabelRequest

// CreateAirdropAddressJSONRequestBody defines body for CreateAirdropAddress for application/json ContentType.
type CreateAirdropAddressJSONRequestBody = CreateAirdropAddressRequest

// ApiKeyCreateJSONRequestBody defines body for ApiKeyCreate for application/json ContentType.
type ApiKeyCreateJSONRequestBody = CreateApiKeyRequest

// ApiKeyUpdateJSONRequestBody defines body for ApiKeyUpdate for application/json ContentType.
type ApiKeyUpdateJSONRequestBody = ApiKeyUpdateRequest

// AuthenticateFormdataRequestBody defines body for Authenticate for application/x-www-form-urlencoded ContentType.
type AuthenticateFormdataRequestBody = FormDataAuthenticateRequest

// CompetitionOptInJSONRequestBody defines body for CompetitionOptIn for application/json ContentType.
type CompetitionOptInJSONRequestBody = CompetitionOptInRequest

// DexSubmitJSONRequestBody defines body for DexSubmit for application/json ContentType.
type DexSubmitJSONRequestBody = DexSubmitRequest

// CancelOrderJSONRequestBody defines body for CancelOrder for application/json ContentType.
type CancelOrderJSONRequestBody = CancelOrderRequest

// CancelReplaceOrderJSONRequestBody defines body for CancelReplaceOrder for application/json ContentType.
type CancelReplaceOrderJSONRequestBody = CancelReplaceOrderRequest

// CancelAllJSONRequestBody defines body for CancelAll for application/json ContentType.
type CancelAllJSONRequestBody = CancelAllRequest

// CreateOrderJSONRequestBody defines body for CreateOrder for application/json ContentType.
type CreateOrderJSONRequestBody = CreateOrderRequest

// CreateOrderBatchJSONRequestBody defines body for CreateOrderBatch for application/json ContentType.
type CreateOrderBatchJSONRequestBody = CreateOrdersBatchRequest

// CreateSimpleOrderJSONRequestBody defines body for CreateSimpleOrder for application/json ContentType.
type CreateSimpleOrderJSONRequestBody = CreateSimpleOrderRequest

// ClaimVoucherJSONRequestBody defines body for ClaimVoucher for application/json ContentType.
type ClaimVoucherJSONRequestBody = VoucherClaimRequest

// CreateSubaccountJSONRequestBody defines body for CreateSubaccount for application/json ContentType.
type CreateSubaccountJSONRequestBody = CreateSubaccountRequest

// UpdateSubaccountJSONRequestBody defines body for UpdateSubaccount for application/json ContentType.
type UpdateSubaccountJSONRequestBody = UpdateSubaccountRequest

// CreatePerpTransferJSONRequestBody defines body for CreatePerpTransfer for application/json ContentType.
type CreatePerpTransferJSONRequestBody = CreatePerpTransferRequest

// CreateTransferJSONRequestBody defines body for CreateTransfer for application/json ContentType.
type CreateTransferJSONRequestBody = CreateTransferRequest

// UpdatePortfolioSettingsJSONRequestBody defines body for UpdatePortfolioSettings for application/json ContentType.
type UpdatePortfolioSettingsJSONRequestBody = SubaccountSettingsRequest

// CancelTriggerOrderJSONRequestBody defines body for CancelTriggerOrder for application/json ContentType.
type CancelTriggerOrderJSONRequestBody = CancelTriggerOrderRequest

// CancelAllTriggerOrdersJSONRequestBody defines body for CancelAllTriggerOrders for application/json ContentType.
type CancelAllTriggerOrdersJSONRequestBody = CancelAllTriggerOrdersRequest

// CreateTriggerOrderJSONRequestBody defines body for CreateTriggerOrder for application/json ContentType.
type CreateTriggerOrderJSONRequestBody = CreateTriggerOrderRequest

// isSubscriptionParams marks CandleSubscriptionParams as implementing SubscriptionParams
func (t CandleSubscriptionParams) isSubscriptionParams() {}

// isSubscriptionParams marks TickerSubscriptionParams as implementing SubscriptionParams
func (t TickerSubscriptionParams) isSubscriptionParams() {}

// isSubscriptionParams marks L2OrderBookSubscriptionParams as implementing SubscriptionParams
func (t L2OrderBookSubscriptionParams) isSubscriptionParams() {}

// isSubscriptionParams marks L1OrderBookSubscriptionParams as implementing SubscriptionParams
func (t L1OrderBookSubscriptionParams) isSubscriptionParams() {}

// isSubscriptionParams marks TradeSubscriptionParams as implementing SubscriptionParams
func (t TradeSubscriptionParams) isSubscriptionParams() {}

// isSubscriptionParams marks BalanceSubscriptionParams as implementing SubscriptionParams
func (t BalanceSubscriptionParams) isSubscriptionParams() {}

// isSubscriptionParams marks PositionSubscriptionParams as implementing SubscriptionParams
func (t PositionSubscriptionParams) isSubscriptionParams() {}

// isSubscriptionParams marks OrderStatusSubscriptionParams as implementing SubscriptionParams
func (t OrderStatusSubscriptionParams) isSubscriptionParams() {}

// isSubscriptionParams marks MarginSubscriptionParams as implementing SubscriptionParams
func (t MarginSubscriptionParams) isSubscriptionParams() {}

// isSubscriptionParams marks TriggerOrderSubscriptionParams as implementing SubscriptionParams
func (t TriggerOrderSubscriptionParams) isSubscriptionParams() {}

// isSubscriptionParams marks LspAssignmentSubscriptionParams as implementing SubscriptionParams
func (t LspAssignmentSubscriptionParams) isSubscriptionParams() {}

// isWebsocketExecuteRequestArgs marks WebsocketOrdersNewExecutionArgs as implementing WebsocketExecuteRequestArgs
func (t WebsocketOrdersNewExecutionArgs) isWebsocketExecuteRequestArgs() {}

// isWebsocketExecuteRequestArgs marks WebsocketOrdersCancelExecutionArgs as implementing WebsocketExecuteRequestArgs
func (t WebsocketOrdersCancelExecutionArgs) isWebsocketExecuteRequestArgs() {}

// isWebsocketExecuteRequestArgs marks WebsocketOrdersCancelAllExecutionArgs as implementing WebsocketExecuteRequestArgs
func (t WebsocketOrdersCancelAllExecutionArgs) isWebsocketExecuteRequestArgs() {}

// isWebsocketExecuteRequestArgs marks WebsocketTriggerOrdersNewExecutionArgs as implementing WebsocketExecuteRequestArgs
func (t WebsocketTriggerOrdersNewExecutionArgs) isWebsocketExecuteRequestArgs() {}

// isWebsocketExecuteRequestArgs marks WebsocketTriggerOrdersCancelExecutionArgs as implementing WebsocketExecuteRequestArgs
func (t WebsocketTriggerOrdersCancelExecutionArgs) isWebsocketExecuteRequestArgs() {}

// isWebsocketExecuteRequestArgs marks WebsocketTriggerOrdersCancelAllExecutionArgs as implementing WebsocketExecuteRequestArgs
func (t WebsocketTriggerOrdersCancelAllExecutionArgs) isWebsocketExecuteRequestArgs() {}

// isWebsocketRequest marks WebsocketPingRequest as implementing WebsocketRequest
func (t WebsocketPingRequest) isWebsocketRequest() {}

// isWebsocketRequest marks WebsocketExecuteRequest as implementing WebsocketRequest
func (t WebsocketExecuteRequest) isWebsocketRequest() {}

// isWebsocketRequest marks WebsocketSubscribeRequest as implementing WebsocketRequest
func (t WebsocketSubscribeRequest) isWebsocketRequest() {}

// isWebsocketRequest marks WebsocketUnsubscribeRequest as implementing WebsocketRequest
func (t WebsocketUnsubscribeRequest) isWebsocketRequest() {}

// isWebsocketResponse marks WebsocketErrorResponse as implementing WebsocketResponse
func (t WebsocketErrorResponse) isWebsocketResponse() {}

// isWebsocketResponse marks WebsocketCandlesUpdate as implementing WebsocketResponse
func (t WebsocketCandlesUpdate) isWebsocketResponse() {}

// isWebsocketResponse marks WebsocketTickerUpdate as implementing WebsocketResponse
func (t WebsocketTickerUpdate) isWebsocketResponse() {}

// isWebsocketResponse marks WebsocketTickerSnapshot as implementing WebsocketResponse
func (t WebsocketTickerSnapshot) isWebsocketResponse() {}

// isWebsocketResponse marks WebsocketL2UpdatesUpdate as implementing WebsocketResponse
func (t WebsocketL2UpdatesUpdate) isWebsocketResponse() {}

// isWebsocketResponse marks WebsocketL2UpdatesSnapshot as implementing WebsocketResponse
func (t WebsocketL2UpdatesSnapshot) isWebsocketResponse() {}

// isWebsocketResponse marks WebsocketL1UpdatesUpdate as implementing WebsocketResponse
func (t WebsocketL1UpdatesUpdate) isWebsocketResponse() {}

// isWebsocketResponse marks WebsocketL1UpdatesSnapshot as implementing WebsocketResponse
func (t WebsocketL1UpdatesSnapshot) isWebsocketResponse() {}

// isWebsocketResponse marks WebsocketTradesUpdate as implementing WebsocketResponse
func (t WebsocketTradesUpdate) isWebsocketResponse() {}

// isWebsocketResponse marks WebsocketTradesSnapshot as implementing WebsocketResponse
func (t WebsocketTradesSnapshot) isWebsocketResponse() {}

// isWebsocketResponse marks WebsocketBalancesUpdate as implementing WebsocketResponse
func (t WebsocketBalancesUpdate) isWebsocketResponse() {}

// isWebsocketResponse marks WebsocketBalancesSnapshot as implementing WebsocketResponse
func (t WebsocketBalancesSnapshot) isWebsocketResponse() {}

// isWebsocketResponse marks WebsocketPositionsUpdate as implementing WebsocketResponse
func (t WebsocketPositionsUpdate) isWebsocketResponse() {}

// isWebsocketResponse marks WebsocketPositionsSnapshot as implementing WebsocketResponse
func (t WebsocketPositionsSnapshot) isWebsocketResponse() {}

// isWebsocketResponse marks WebsocketOrderStatusesUpdate as implementing WebsocketResponse
func (t WebsocketOrderStatusesUpdate) isWebsocketResponse() {}

// isWebsocketResponse marks WebsocketOrderStatusesSnapshot as implementing WebsocketResponse
func (t WebsocketOrderStatusesSnapshot) isWebsocketResponse() {}

// isWebsocketResponse marks WebsocketMarginUpdate as implementing WebsocketResponse
func (t WebsocketMarginUpdate) isWebsocketResponse() {}

// isWebsocketResponse marks WebsocketMarginSnapshot as implementing WebsocketResponse
func (t WebsocketMarginSnapshot) isWebsocketResponse() {}

// isWebsocketResponse marks WebsocketTriggerOrdersUpdate as implementing WebsocketResponse
func (t WebsocketTriggerOrdersUpdate) isWebsocketResponse() {}

// isWebsocketResponse marks WebsocketTriggerOrdersSnapshot as implementing WebsocketResponse
func (t WebsocketTriggerOrdersSnapshot) isWebsocketResponse() {}

// isWebsocketResponse marks WebsocketLspAssignmentsUpdate as implementing WebsocketResponse
func (t WebsocketLspAssignmentsUpdate) isWebsocketResponse() {}

// isWebsocketResponse marks WebsocketOrdersNewResponse as implementing WebsocketResponse
func (t WebsocketOrdersNewResponse) isWebsocketResponse() {}

// isWebsocketResponse marks WebsocketOrdersCancelResponse as implementing WebsocketResponse
func (t WebsocketOrdersCancelResponse) isWebsocketResponse() {}

// isWebsocketResponse marks WebsocketOrdersCancelAllResponse as implementing WebsocketResponse
func (t WebsocketOrdersCancelAllResponse) isWebsocketResponse() {}

// isWebsocketResponse marks WebsocketTriggerOrdersNewResponse as implementing WebsocketResponse
func (t WebsocketTriggerOrdersNewResponse) isWebsocketResponse() {}

// isWebsocketResponse marks WebsocketTriggerOrdersCancelResponse as implementing WebsocketResponse
func (t WebsocketTriggerOrdersCancelResponse) isWebsocketResponse() {}

// isWebsocketResponse marks WebsocketTriggerOrdersCancelAllResponse as implementing WebsocketResponse
func (t WebsocketTriggerOrdersCancelAllResponse) isWebsocketResponse() {}

// isWebsocketResponse marks WebsocketPongResponse as implementing WebsocketResponse
func (t WebsocketPongResponse) isWebsocketResponse() {}

// isWebsocketResponse marks WebsocketConfirmation as implementing WebsocketResponse
func (t WebsocketConfirmation) isWebsocketResponse() {}

// isWebsocketSubscribeRequestArgs marks WebsocketCandlesSubscriptionArgs as implementing WebsocketSubscribeRequestArgs
func (t WebsocketCandlesSubscriptionArgs) isWebsocketSubscribeRequestArgs() {}

// isWebsocketSubscribeRequestArgs marks WebsocketTickerSubscriptionArgs as implementing WebsocketSubscribeRequestArgs
func (t WebsocketTickerSubscriptionArgs) isWebsocketSubscribeRequestArgs() {}

// isWebsocketSubscribeRequestArgs marks WebsocketL2UpdatesSubscriptionArgs as implementing WebsocketSubscribeRequestArgs
func (t WebsocketL2UpdatesSubscriptionArgs) isWebsocketSubscribeRequestArgs() {}

// isWebsocketSubscribeRequestArgs marks WebsocketL1UpdatesSubscriptionArgs as implementing WebsocketSubscribeRequestArgs
func (t WebsocketL1UpdatesSubscriptionArgs) isWebsocketSubscribeRequestArgs() {}

// isWebsocketSubscribeRequestArgs marks WebsocketTradesSubscriptionArgs as implementing WebsocketSubscribeRequestArgs
func (t WebsocketTradesSubscriptionArgs) isWebsocketSubscribeRequestArgs() {}

// isWebsocketSubscribeRequestArgs marks WebsocketBalancesSubscriptionArgs as implementing WebsocketSubscribeRequestArgs
func (t WebsocketBalancesSubscriptionArgs) isWebsocketSubscribeRequestArgs() {}

// isWebsocketSubscribeRequestArgs marks WebsocketPositionsSubscriptionArgs as implementing WebsocketSubscribeRequestArgs
func (t WebsocketPositionsSubscriptionArgs) isWebsocketSubscribeRequestArgs() {}

// isWebsocketSubscribeRequestArgs marks WebsocketOrderStatusesSubscriptionArgs as implementing WebsocketSubscribeRequestArgs
func (t WebsocketOrderStatusesSubscriptionArgs) isWebsocketSubscribeRequestArgs() {}

// isWebsocketSubscribeRequestArgs marks WebsocketMarginSubscriptionArgs as implementing WebsocketSubscribeRequestArgs
func (t WebsocketMarginSubscriptionArgs) isWebsocketSubscribeRequestArgs() {}

// isWebsocketSubscribeRequestArgs marks WebsocketTriggerOrdersSubscriptionArgs as implementing WebsocketSubscribeRequestArgs
func (t WebsocketTriggerOrdersSubscriptionArgs) isWebsocketSubscribeRequestArgs() {}

// isWebsocketSubscribeRequestArgs marks WebsocketLspAssignmentsSubscriptionArgs as implementing WebsocketSubscribeRequestArgs
func (t WebsocketLspAssignmentsSubscriptionArgs) isWebsocketSubscribeRequestArgs() {}
