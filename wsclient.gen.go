// Code generated by internal/sdkgen/go/generate.go; DO NOT EDIT.
package arkham

import (
	"context"
	"encoding/json"
	"fmt"
)


func (ws *ArkhamWebSocket) Candles(params CandleSubscriptionParams, onUpdate func(data Candle)) (UnsubscribeFunc, error) {
	return ws.subscribe("candles", params, func(t WebsocketDataType, data []byte) error {
		switch t {
		case WebsocketDataTypeUpdate:
			var res Candle
			if err := json.Unmarshal(data, &res); err != nil {
				return fmt.Errorf("error unmarshaling update data: %w", err)
			}
			onUpdate(res)

		default:
			return fmt.Errorf("unexpected response type: %s", t)
		}
		return nil
	})
}

func (ws *ArkhamWebSocket) Ticker(params TickerSubscriptionParams, onUpdate func(data Ticker), onSnapshot func(data Ticker)) (UnsubscribeFunc, error) {
	return ws.subscribe("ticker", params, func(t WebsocketDataType, data []byte) error {
		switch t {
		case WebsocketDataTypeUpdate:
			var res Ticker
			if err := json.Unmarshal(data, &res); err != nil {
				return fmt.Errorf("error unmarshaling update data: %w", err)
			}
			onUpdate(res)

		case WebsocketDataTypeSnapshot:
			var res Ticker
			if err := json.Unmarshal(data, &res); err != nil {
				return fmt.Errorf("error unmarshaling snapshot data: %w", err)
			}
			onSnapshot(res)

		default:
			return fmt.Errorf("unexpected response type: %s", t)
		}
		return nil
	})
}

func (ws *ArkhamWebSocket) L2Updates(params L2OrderBookSubscriptionParams, onUpdate func(data L2Update), onSnapshot func(data OrderBook)) (UnsubscribeFunc, error) {
	return ws.subscribe("l2_updates", params, func(t WebsocketDataType, data []byte) error {
		switch t {
		case WebsocketDataTypeUpdate:
			var res L2Update
			if err := json.Unmarshal(data, &res); err != nil {
				return fmt.Errorf("error unmarshaling update data: %w", err)
			}
			onUpdate(res)

		case WebsocketDataTypeSnapshot:
			var res OrderBook
			if err := json.Unmarshal(data, &res); err != nil {
				return fmt.Errorf("error unmarshaling snapshot data: %w", err)
			}
			onSnapshot(res)

		default:
			return fmt.Errorf("unexpected response type: %s", t)
		}
		return nil
	})
}

func (ws *ArkhamWebSocket) L1Updates(params L1OrderBookSubscriptionParams, onUpdate func(data L1OrderBook), onSnapshot func(data L1OrderBook)) (UnsubscribeFunc, error) {
	return ws.subscribe("l1_updates", params, func(t WebsocketDataType, data []byte) error {
		switch t {
		case WebsocketDataTypeUpdate:
			var res L1OrderBook
			if err := json.Unmarshal(data, &res); err != nil {
				return fmt.Errorf("error unmarshaling update data: %w", err)
			}
			onUpdate(res)

		case WebsocketDataTypeSnapshot:
			var res L1OrderBook
			if err := json.Unmarshal(data, &res); err != nil {
				return fmt.Errorf("error unmarshaling snapshot data: %w", err)
			}
			onSnapshot(res)

		default:
			return fmt.Errorf("unexpected response type: %s", t)
		}
		return nil
	})
}

func (ws *ArkhamWebSocket) Trades(params TradeSubscriptionParams, onUpdate func(data Trade), onSnapshot func(data []Trade)) (UnsubscribeFunc, error) {
	return ws.subscribe("trades", params, func(t WebsocketDataType, data []byte) error {
		switch t {
		case WebsocketDataTypeUpdate:
			var res Trade
			if err := json.Unmarshal(data, &res); err != nil {
				return fmt.Errorf("error unmarshaling update data: %w", err)
			}
			onUpdate(res)

		case WebsocketDataTypeSnapshot:
			var res []Trade
			if err := json.Unmarshal(data, &res); err != nil {
				return fmt.Errorf("error unmarshaling snapshot data: %w", err)
			}
			onSnapshot(res)

		default:
			return fmt.Errorf("unexpected response type: %s", t)
		}
		return nil
	})
}

func (ws *ArkhamWebSocket) Balances(params BalanceSubscriptionParams, onUpdate func(data Balance), onSnapshot func(data []Balance)) (UnsubscribeFunc, error) {
	return ws.subscribe("balances", params, func(t WebsocketDataType, data []byte) error {
		switch t {
		case WebsocketDataTypeUpdate:
			var res Balance
			if err := json.Unmarshal(data, &res); err != nil {
				return fmt.Errorf("error unmarshaling update data: %w", err)
			}
			onUpdate(res)

		case WebsocketDataTypeSnapshot:
			var res []Balance
			if err := json.Unmarshal(data, &res); err != nil {
				return fmt.Errorf("error unmarshaling snapshot data: %w", err)
			}
			onSnapshot(res)

		default:
			return fmt.Errorf("unexpected response type: %s", t)
		}
		return nil
	})
}

func (ws *ArkhamWebSocket) Positions(params PositionSubscriptionParams, onUpdate func(data Position), onSnapshot func(data []Position)) (UnsubscribeFunc, error) {
	return ws.subscribe("positions", params, func(t WebsocketDataType, data []byte) error {
		switch t {
		case WebsocketDataTypeUpdate:
			var res Position
			if err := json.Unmarshal(data, &res); err != nil {
				return fmt.Errorf("error unmarshaling update data: %w", err)
			}
			onUpdate(res)

		case WebsocketDataTypeSnapshot:
			var res []Position
			if err := json.Unmarshal(data, &res); err != nil {
				return fmt.Errorf("error unmarshaling snapshot data: %w", err)
			}
			onSnapshot(res)

		default:
			return fmt.Errorf("unexpected response type: %s", t)
		}
		return nil
	})
}

func (ws *ArkhamWebSocket) OrderStatuses(params OrderStatusSubscriptionParams, onUpdate func(data Order), onSnapshot func(data []Order)) (UnsubscribeFunc, error) {
	return ws.subscribe("order_statuses", params, func(t WebsocketDataType, data []byte) error {
		switch t {
		case WebsocketDataTypeUpdate:
			var res Order
			if err := json.Unmarshal(data, &res); err != nil {
				return fmt.Errorf("error unmarshaling update data: %w", err)
			}
			onUpdate(res)

		case WebsocketDataTypeSnapshot:
			var res []Order
			if err := json.Unmarshal(data, &res); err != nil {
				return fmt.Errorf("error unmarshaling snapshot data: %w", err)
			}
			onSnapshot(res)

		default:
			return fmt.Errorf("unexpected response type: %s", t)
		}
		return nil
	})
}

func (ws *ArkhamWebSocket) Margin(params MarginSubscriptionParams, onUpdate func(data Margin), onSnapshot func(data Margin)) (UnsubscribeFunc, error) {
	return ws.subscribe("margin", params, func(t WebsocketDataType, data []byte) error {
		switch t {
		case WebsocketDataTypeUpdate:
			var res Margin
			if err := json.Unmarshal(data, &res); err != nil {
				return fmt.Errorf("error unmarshaling update data: %w", err)
			}
			onUpdate(res)

		case WebsocketDataTypeSnapshot:
			var res Margin
			if err := json.Unmarshal(data, &res); err != nil {
				return fmt.Errorf("error unmarshaling snapshot data: %w", err)
			}
			onSnapshot(res)

		default:
			return fmt.Errorf("unexpected response type: %s", t)
		}
		return nil
	})
}

func (ws *ArkhamWebSocket) TriggerOrders(params TriggerOrderSubscriptionParams, onUpdate func(data TriggerOrder), onSnapshot func(data []TriggerOrder)) (UnsubscribeFunc, error) {
	return ws.subscribe("trigger_orders", params, func(t WebsocketDataType, data []byte) error {
		switch t {
		case WebsocketDataTypeUpdate:
			var res TriggerOrder
			if err := json.Unmarshal(data, &res); err != nil {
				return fmt.Errorf("error unmarshaling update data: %w", err)
			}
			onUpdate(res)

		case WebsocketDataTypeSnapshot:
			var res []TriggerOrder
			if err := json.Unmarshal(data, &res); err != nil {
				return fmt.Errorf("error unmarshaling snapshot data: %w", err)
			}
			onSnapshot(res)

		default:
			return fmt.Errorf("unexpected response type: %s", t)
		}
		return nil
	})
}

func (ws *ArkhamWebSocket) LspAssignments(params LspAssignmentSubscriptionParams, onUpdate func(data LspAssignment)) (UnsubscribeFunc, error) {
	return ws.subscribe("lsp_assignments", params, func(t WebsocketDataType, data []byte) error {
		switch t {
		case WebsocketDataTypeUpdate:
			var res LspAssignment
			if err := json.Unmarshal(data, &res); err != nil {
				return fmt.Errorf("error unmarshaling update data: %w", err)
			}
			onUpdate(res)

		default:
			return fmt.Errorf("unexpected response type: %s", t)
		}
		return nil
	})
}

func (ws *ArkhamWebSocket) CreateOrder(ctx context.Context, params CreateOrderRequest) (CreateOrderResponse, error) {
	var res CreateOrderResponse
	response, err := ws.execute(ctx, "orders/new", params)
	if err != nil {
		return res, fmt.Errorf("executing request: %w", err)
	}
	if err := json.Unmarshal(response, &res); err != nil {
		return res, fmt.Errorf("error unmarshaling response: %w", err)
	}
	return res, nil
}

func (ws *ArkhamWebSocket) CancelOrder(ctx context.Context, params CancelOrderRequest) (CancelOrderResponse, error) {
	var res CancelOrderResponse
	response, err := ws.execute(ctx, "orders/cancel", params)
	if err != nil {
		return res, fmt.Errorf("executing request: %w", err)
	}
	if err := json.Unmarshal(response, &res); err != nil {
		return res, fmt.Errorf("error unmarshaling response: %w", err)
	}
	return res, nil
}

func (ws *ArkhamWebSocket) CancelAll(ctx context.Context, params CancelAllRequest) (CancelAllResponse, error) {
	var res CancelAllResponse
	response, err := ws.execute(ctx, "orders/cancel/all", params)
	if err != nil {
		return res, fmt.Errorf("executing request: %w", err)
	}
	if err := json.Unmarshal(response, &res); err != nil {
		return res, fmt.Errorf("error unmarshaling response: %w", err)
	}
	return res, nil
}

func (ws *ArkhamWebSocket) CreateTriggerOrder(ctx context.Context, params CreateTriggerOrderRequest) (CreateTriggerOrderResponse, error) {
	var res CreateTriggerOrderResponse
	response, err := ws.execute(ctx, "trigger_orders/new", params)
	if err != nil {
		return res, fmt.Errorf("executing request: %w", err)
	}
	if err := json.Unmarshal(response, &res); err != nil {
		return res, fmt.Errorf("error unmarshaling response: %w", err)
	}
	return res, nil
}

func (ws *ArkhamWebSocket) CancelTriggerOrder(ctx context.Context, params CancelTriggerOrderRequest) (CancelTriggerOrderResponse, error) {
	var res CancelTriggerOrderResponse
	response, err := ws.execute(ctx, "trigger_orders/cancel", params)
	if err != nil {
		return res, fmt.Errorf("executing request: %w", err)
	}
	if err := json.Unmarshal(response, &res); err != nil {
		return res, fmt.Errorf("error unmarshaling response: %w", err)
	}
	return res, nil
}

func (ws *ArkhamWebSocket) CancelAllTriggerOrders(ctx context.Context, params CancelAllTriggerOrdersRequest) (CancelAllTriggerOrdersResponse, error) {
	var res CancelAllTriggerOrdersResponse
	response, err := ws.execute(ctx, "trigger_orders/cancel/all", params)
	if err != nil {
		return res, fmt.Errorf("executing request: %w", err)
	}
	if err := json.Unmarshal(response, &res); err != nil {
		return res, fmt.Errorf("error unmarshaling response: %w", err)
	}
	return res, nil
}
